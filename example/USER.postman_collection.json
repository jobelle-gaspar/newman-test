{
	"info": {
		"_postman_id": "f2e4907f-8051-487f-8efc-fbd13783e2e2",
		"name": "USER test suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add Warmy -- FINAL",
			"item": [
				{
					"name": "LOGIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Warmy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"requestBody = JSON.parse(pm.request.body.raw);\r",
									"var responseBody = pm.response.json();\r",
									"var responseText= pm.response.json().notes.userMessage;\r",
									"\r",
									"//sets variable to check whether username exists in user collection\r",
									"pm.variables.set(\"warmUsersUsername\", requestBody.warmUser.username);\r",
									"\r",
									"\r",
									"if(pm.response.code==200)\r",
									"{\r",
									"    //setting a varible with the requestbody to be able to validate that retrived user does contain right data\r",
									"    pm.variables.set(\"addWarmyRequest\", JSON.stringify(requestBody) );\r",
									"\r",
									"    //Checks if status is 200\r",
									"    pm.test(\"Status code is 200 for username '\"+requestBody.warmUser.username+ \"'\");\r",
									"\r",
									"    // Any of the required fields are not empty\r",
									"    // Will fail pass if any of the tests are false, i.e. no fields are are empty)\r",
									"    pm.test(\"All required fields are given\", function () {\r",
									"\r",
									"        pm.expect(isNull(requestBody.warmUser.firstName) || isNull(requestBody.warmUser.lastName) ||\r",
									"            isNull(requestBody.warmUser.username) || isNull(requestBody.warmUser.displayName) ||\r",
									"            isNull(requestBody.warmUser.email) || isNull(requestBody.warmUser.influencer.description) ||\r",
									"            isNull(requestBody.warmUser.influencer.descriptionLong) || isNull(requestBody.warmUser.influencer.currentLocation) ||\r",
									"            arrayIsEmpty(requestBody.warmUser.influencer.categories) || isNull(requestBody.warmUser.influencer.gender) ||\r",
									"            isEmpty(requestBody.profileImage) || isEmpty(requestBody.coverImage)).to.equal(false);\r",
									"    });\r",
									"\r",
									"    //Check that given user object contain an influencer object\r",
									"    pm.test(\"Passed in user '\" +requestBody.warmUser.username +\"' have an influencer object\", function () {\r",
									"        pm.expect(isEmpty(requestBody.warmUser.influencer)).to.equal(false);\r",
									"    });\r",
									"\r",
									"    // Check that at least one social channel is given\r",
									"    pm.test(\"A social channel is given\", function () {\r",
									"        pm.expect(isEmpty(requestBody.warmUser.influencer.instagramProfile) && isEmpty(requestBody.warmUser.influencer.facebookProfile) && isEmpty(requestBody.warmUser.influencer.twitterProfile) && isEmpty(requestBody.warmUser.influencer.youtubeProfile) && isEmpty(requestBody.warmUser.influencer.tiktokProfile)).to.equal(false);\r",
									"    })\r",
									"\r",
									"}\r",
									"else if(pm.response.code==400)\r",
									"{\r",
									"    pm.test(\"Status is 400\");\r",
									"    //Checks the response text, if it returns any of the following then the test will not pass, i.e. username, email, or social account is not unique\r",
									"    if(responseText!==null)\r",
									"    {\r",
									"        pm.test(\"Unsuccessful call for username '\"+requestBody.warmUser.username+ \"'. \" + responseText, function (){\r",
									"            pm.expect(responseText).to.be.oneOf([\"Email already being used\", \"Username is not unique\", \r",
									"            \"The INSTAGRAM account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The FACEBOOK account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The TWITTER account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The TIKTOK account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The YOUTUBE account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The BLOG account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The PINTEREST account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"User must have at least one social profile/blog\"])\r",
									"        })\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//---------Functions\r",
									"\r",
									"//Returns false if the object is empty\r",
									"function isEmpty(obj) {\r",
									"    for (var prop in obj) {\r",
									"        if (obj.hasOwnProperty(prop)) {\r",
									"            return false;\r",
									"        }\r",
									"        else {\r",
									"\r",
									"            return true;\r",
									"        }\r",
									"    }\r",
									"    return JSON.stringify(obj) === JSON.stringify({});\r",
									"}\r",
									"\r",
									"//Returns true if given value is null or \"\"\r",
									"function isNull(value) {\r",
									"    if (value === null || value === \"\") //backend doesn't seem to check for empty field-> \"\" \"     \"\r",
									"    {\r",
									"        return true;\r",
									"    }\r",
									"}\r",
									"\r",
									"//Returns true if array is empty\r",
									"function arrayIsEmpty(array) {\r",
									"    if (array.length === 0) {\r",
									"        return true;\r",
									"    }\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"warmUser\": {\r\n        \"firstName\": \"Sam\",\r\n        \"lastName\": \"Walker\",\r\n        \"username\": \"{{addWarmyUsername}}\",\r\n        \"displayName\": \"thewalkerways\",\r\n        \"email\": \"dumbanddummy1+thewalkerways@gmail.com\",\r\n        \"influencer\": {\r\n            \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Nisl purus in mollis nunc sed id semper risus in. Hac habitasse platea dictumst quisque sagittis purus sit amet volutpat. Sed euismod nisi porta lorem. Puru\",\r\n            \"descriptionLong\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Nisl purus in mollis nunc sed id semper risus in. Hac habitasse platea dictumst quisque sagittis purus sit amet volutpat. Sed euismod nisi porta lorem. Purus gravida quis blandit turpis cursus in hac habitasse. Sapien pellentesque habitant morbi tristique senectus et netus. Aliquet nec ullamcorper sit amet risus. Sed risus ultricies tristique nulla aliquet enim. Tellus elementum sagittis vitae et leo duis ut diam quam. Odio euismod lacinia at quis risus. Id interdum velit laoreet id. Pellentesque sit amet porttitor eget dolor morbi non arcu risus. Sollicitudin ac orci phasellus egestas tellus. Egestas egestas fringilla phasellus faucibus scelerisque eleifend donec pretium. Egestas tellus rutrum tellus pellentesque eu tincidunt. Lectus nulla at volutpat diam ut. Pellentesque pulvinar pellentesque habitant morbi tristique senectus.\",\r\n            \"currentLocation\": \"Melbourne (Australia)\",\r\n            \"categories\": [\r\n                \"Beauty\"\r\n            ],\r\n            \"gender\": \"FEMALE\",\r\n            \"instagramProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            },\r\n            \"facebookProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            },\r\n            \"twitterProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            },\r\n            \"youtubeProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            },\r\n            \"tiktokProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            }\r\n        }\r\n    },\r\n    \"profileImage\": {\r\n        \"bytes\": \"\",\r\n        \"contentType\": \"image/jpeg\"\r\n    },\r\n    \"coverImage\": {\r\n        \"bytes\": \"\",\r\n        \"contentType\": \"image/jpeg\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/warm",
							"host": [
								"{{test}}user"
							],
							"path": [
								"warm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"var influencerProfileStatus = jsonData.object.profileStatus\r",
									"\r",
									"pm.test(\"Verify profile status is warmy: \"+influencerProfileStatus, function () {\r",
									"    pm.expect(jsonData.object.profileStatus\t).to.eql('warminfluencer');\r",
									"});\r",
									"\r",
									"var addedwarmy = JSON.parse(pm.variables.get(\"addWarmyRequest\"));\r",
									"//console.log(addedwarmy.warmUser.firstName)\r",
									"\r",
									"var influencerFirstName = jsonData.object.firstName\r",
									"\r",
									"pm.test(\"Verify First Name is correct: \"+influencerFirstName, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.firstName).to.eql(addedwarmy.warmUser.firstName);\r",
									"});\r",
									"\r",
									"var influencerLastName = jsonData.object.lastName\r",
									"pm.test(\"Verify Last Name is correct: \"+influencerLastName, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.lastName).to.eql(addedwarmy.warmUser.lastName);\r",
									"});\r",
									"\r",
									"var influencerUsername = jsonData.object.username\r",
									"pm.test(\"Verify username is correct: \"+ influencerUsername, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.username).to.eql(addedwarmy.warmUser.username);\r",
									"});\r",
									"\r",
									"var influencerDisplayName = jsonData.object.displayName\r",
									"pm.test(\"Verify display name is correct: \"+influencerDisplayName, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.displayName).to.eql(addedwarmy.warmUser.displayName);\r",
									"});\r",
									"\r",
									"var influencerIgUsername = jsonData.object.influencer.instagramProfile.username\r",
									"pm.test(\"Verify IG username is correct: \"+influencerIgUsername, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.influencer.instagramProfile.username).to.eql(addedwarmy.warmUser.influencer.instagramProfile.username)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{addWarmyUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{addWarmyUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Warmy Eemail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Updated email\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.user.email).to.eql(pm.variables.get(\"updateWarmyEmail\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\r\n    \"email\":\"{{updateWarmyEmail}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/warm/{{addWarmyUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"warm",
								"{{addWarmyUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Warmy Profile INFO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"//setting a varible with the requestbody to be able to validate that retrived user does contain right data\r",
									"pm.variables.set(\"updateWarmyProfile\", JSON.stringify(requestBody) );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\r\n    \"firstName\" : \"Priya\",\r\n    \"lastName\" : \"Sid\",\r\n    \"displayName\" : \"Priya Sid\",\r\n    \"influencer\": {\r\n        \"categories\" : [\r\n            \"Beauty\",\r\n            \"Books\",\r\n            \"Travel\"\r\n        ]\r\n    }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{addWarmyUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{addWarmyUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var updatedProfile = JSON.parse(pm.variables.get(\"updateWarmyProfile\"));\r",
									"var addedwarmy = JSON.parse(pm.variables.get(\"addWarmyRequest\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Verify updated email address\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.email).to.eql(pm.variables.get(\"updateWarmyEmail\"));\r",
									"});\r",
									"pm.test(\"Verify profile status\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.profileStatus\t).to.eql('warminfluencer');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify First Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.firstName).to.eql(updatedProfile.user.firstName);\r",
									"});\r",
									"pm.test(\"Verify Last Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.lastName).to.eql(updatedProfile.user.lastName);\r",
									"});\r",
									"pm.test(\"Verify username\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.username).to.eql(addedwarmy.warmUser.username);\r",
									"});\r",
									"pm.test(\"Verify display name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.displayName).to.eql(updatedProfile.user.displayName);\r",
									"});\r",
									"pm.test(\"Verify IG username\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.influencer.instagramProfile.username).to.eql(addedwarmy.warmUser.influencer.instagramProfile.username)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{addWarmyUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{addWarmyUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE warmy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}user/{{addWarmyUsername}}?deleteSocialChannels=true",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{addWarmyUsername}}"
							],
							"query": [
								{
									"key": "deleteSocialChannels",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var updatedProfile = JSON.parse(pm.variables.get(\"updateWarmyProfile\"));\r",
									"var addedwarmy = JSON.parse(pm.variables.get(\"addWarmyRequest\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Verify profile status is deleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.profileStatus\t).to.eql('deleted');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify First Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.firstName).to.eql(updatedProfile.user.firstName);\r",
									"});\r",
									"pm.test(\"Verify Last Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.lastName).to.eql(updatedProfile.user.lastName);\r",
									"});\r",
									"pm.test(\"Verify username\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.username).to.eql(addedwarmy.warmUser.username);\r",
									"});\r",
									"pm.test(\"Verify display name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.displayName).to.eql(updatedProfile.user.displayName);\r",
									"});\r",
									"pm.test(\"Verify social profile is deleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.object.influencer.instagramProfile).to.not.exist\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{addWarmyUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{addWarmyUsername}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Add Warmy (Existing Email)",
			"item": [
				{
					"name": "LOGIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Warmy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"requestBody = JSON.parse(pm.request.body.raw);\r",
									"var responseBody = pm.response.json();\r",
									"var responseText= pm.response.json().notes.userMessage;\r",
									"\r",
									"//sets variable to check whether username exists in user collection\r",
									"pm.variables.set(\"negWarmUsersUsername\", requestBody.warmUser.username);\r",
									"\r",
									"\r",
									"if(pm.response.code==200)\r",
									"{\r",
									"    //setting a varible with the requestbody to be able to validate that retrived user does contain right data\r",
									"    pm.variables.set(\"addWarmyRequest\", JSON.stringify(requestBody) );\r",
									"\r",
									"    //Checks if status is 200\r",
									"    pm.test(\"Status code is 200 for username '\"+requestBody.warmUser.username+ \"'\");\r",
									"\r",
									"    // Any of the required fields are not empty\r",
									"    // Will fail pass if any of the tests are false, i.e. no fields are are empty)\r",
									"    pm.test(\"All required fields are given\", function () {\r",
									"\r",
									"        pm.expect(isNull(requestBody.warmUser.firstName) || isNull(requestBody.warmUser.lastName) ||\r",
									"            isNull(requestBody.warmUser.username) || isNull(requestBody.warmUser.displayName) ||\r",
									"            isNull(requestBody.warmUser.email) || isNull(requestBody.warmUser.influencer.description) ||\r",
									"            isNull(requestBody.warmUser.influencer.descriptionLong) || isNull(requestBody.warmUser.influencer.currentLocation) ||\r",
									"            arrayIsEmpty(requestBody.warmUser.influencer.categories) || isNull(requestBody.warmUser.influencer.gender) ||\r",
									"            isEmpty(requestBody.profileImage) || isEmpty(requestBody.coverImage)).to.equal(false);\r",
									"    });\r",
									"\r",
									"    //Check that given user object contain an influencer object\r",
									"    pm.test(\"Passed in user '\" +requestBody.warmUser.username +\"' have an influencer object\", function () {\r",
									"        pm.expect(isEmpty(requestBody.warmUser.influencer)).to.equal(false);\r",
									"    });\r",
									"\r",
									"    // Check that at least one social channel is given\r",
									"    pm.test(\"A social channel is given\", function () {\r",
									"        pm.expect(isEmpty(requestBody.warmUser.influencer.instagramProfile) && isEmpty(requestBody.warmUser.influencer.facebookProfile) && isEmpty(requestBody.warmUser.influencer.twitterProfile) && isEmpty(requestBody.warmUser.influencer.youtubeProfile) && isEmpty(requestBody.warmUser.influencer.tiktokProfile)).to.equal(false);\r",
									"    })\r",
									"\r",
									"}\r",
									"else if(pm.response.code==400)\r",
									"{\r",
									"    pm.test(\"Status is 400\");\r",
									"    //Checks the response text, if it returns any of the following then the test will not pass, i.e. username, email, or social account is not unique\r",
									"    if(responseText!==null)\r",
									"    {\r",
									"        pm.test(\"Unsuccessful call for username '\"+requestBody.warmUser.username+ \"'. \" + responseText, function (){\r",
									"            pm.expect(responseText).to.be.oneOf([\"Email already being used\", \"Username is not unique\", \r",
									"            \"The INSTAGRAM account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The FACEBOOK account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The TWITTER account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The TIKTOK account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The YOUTUBE account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The BLOG account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"The PINTEREST account entered is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",\r",
									"            \"User must have at least one social profile/blog\"])\r",
									"        })\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"//---------Functions\r",
									"\r",
									"//Returns false if the object is empty\r",
									"function isEmpty(obj) {\r",
									"    for (var prop in obj) {\r",
									"        if (obj.hasOwnProperty(prop)) {\r",
									"            return false;\r",
									"        }\r",
									"        else {\r",
									"\r",
									"            return true;\r",
									"        }\r",
									"    }\r",
									"    return JSON.stringify(obj) === JSON.stringify({});\r",
									"}\r",
									"\r",
									"//Returns true if given value is null or \"\"\r",
									"function isNull(value) {\r",
									"    if (value === null || value === \"\") //backend doesn't seem to check for empty field-> \"\" \"     \"\r",
									"    {\r",
									"        return true;\r",
									"    }\r",
									"}\r",
									"\r",
									"//Returns true if array is empty\r",
									"function arrayIsEmpty(array) {\r",
									"    if (array.length === 0) {\r",
									"        return true;\r",
									"    }\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"warmUser\": {\r\n        \"firstName\": \"Sam\",\r\n        \"lastName\": \"Walker\",\r\n        \"username\": \"tinawalker\",\r\n        \"displayName\": \"thewalkerways\",\r\n        \"email\": \"dumbanddummy1+brooke@gmail.com\",\r\n        \"influencer\": {\r\n            \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Nisl purus in mollis nunc sed id semper risus in. Hac habitasse platea dictumst quisque sagittis purus sit amet volutpat. Sed euismod nisi porta lorem. Puru\",\r\n            \"descriptionLong\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Nisl purus in mollis nunc sed id semper risus in. Hac habitasse platea dictumst quisque sagittis purus sit amet volutpat. Sed euismod nisi porta lorem. Purus gravida quis blandit turpis cursus in hac habitasse. Sapien pellentesque habitant morbi tristique senectus et netus. Aliquet nec ullamcorper sit amet risus. Sed risus ultricies tristique nulla aliquet enim. Tellus elementum sagittis vitae et leo duis ut diam quam. Odio euismod lacinia at quis risus. Id interdum velit laoreet id. Pellentesque sit amet porttitor eget dolor morbi non arcu risus. Sollicitudin ac orci phasellus egestas tellus. Egestas egestas fringilla phasellus faucibus scelerisque eleifend donec pretium. Egestas tellus rutrum tellus pellentesque eu tincidunt. Lectus nulla at volutpat diam ut. Pellentesque pulvinar pellentesque habitant morbi tristique senectus.\",\r\n            \"currentLocation\": \"Melbourne (Australia)\",\r\n            \"categories\": [\r\n                \"Beauty\"\r\n            ],\r\n            \"gender\": \"FEMALE\",\r\n            \"instagramProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            },\r\n            \"facebookProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            },\r\n            \"twitterProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            },\r\n            \"youtubeProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            },\r\n            \"tiktokProfile\": {\r\n                \"username\": \"thewalkerways\"\r\n            }\r\n        }\r\n    },\r\n    \"profileImage\": {\r\n        \"bytes\": \"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\",\r\n        \"contentType\": \"image/jpeg\"\r\n    },\r\n    \"coverImage\": {\r\n        \"bytes\": \"\",\r\n        \"contentType\": \"image/jpeg\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/warm",
							"host": [
								"{{test}}user"
							],
							"path": [
								"warm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code==200)\r",
									"{\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    var jsonData = pm.response.json();\r",
									"    var influencerProfileStatus = jsonData.object.profileStatus\r",
									"\r",
									"    pm.test(\"Verify profile status is warmy: \"+influencerProfileStatus, function () {\r",
									"        pm.expect(jsonData.object.profileStatus\t).to.eql('warminfluencer');\r",
									"    });\r",
									"\r",
									"    var addedwarmy = JSON.parse(pm.variables.get(\"addWarmyRequest\"));\r",
									"    //console.log(addedwarmy.warmUser.firstName)\r",
									"\r",
									"    var influencerFirstName = jsonData.object.firstName\r",
									"\r",
									"    pm.test(\"Verify First Name is correct: \"+influencerFirstName, function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.object.firstName).to.eql(addedwarmy.warmUser.firstName);\r",
									"    });\r",
									"\r",
									"    var influencerLastName = jsonData.object.lastName\r",
									"    pm.test(\"Verify Last Name is correct: \"+influencerLastName, function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.object.lastName).to.eql(addedwarmy.warmUser.lastName);\r",
									"    });\r",
									"\r",
									"    var influencerUsername = jsonData.object.username\r",
									"    pm.test(\"Verify username is correct: \"+ influencerUsername, function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.object.username).to.eql(addedwarmy.warmUser.username);\r",
									"    });\r",
									"\r",
									"    var influencerDisplayName = jsonData.object.displayName\r",
									"    pm.test(\"Verify display name is correct: \"+influencerDisplayName, function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.object.displayName).to.eql(addedwarmy.warmUser.displayName);\r",
									"    });\r",
									"\r",
									"    var influencerIgUsername = jsonData.object.influencer.instagramProfile.username\r",
									"    pm.test(\"Verify IG username is correct: \"+influencerIgUsername, function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.object.influencer.instagramProfile.username).to.eql(addedwarmy.warmUser.influencer.instagramProfile.username)\r",
									"    });\r",
									"}\r",
									"else if (pm.response.code==404)\r",
									"{\r",
									"    pm.test(\"User not found\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{negWarmUsersUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{negWarmUsersUsername}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Active User -- FINAL",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Exist in User Collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"dataForRevert = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //to save user object before altering it",
									"    // will be used as request body in PUT call to revert changes",
									"    delete dataForRevert.object.id;",
									"    delete dataForRevert.object.dateCreated;",
									"    delete dataForRevert.object.dateModified;",
									"    //console.log(dataForRevert.object);",
									"",
									"    pm.environment.set(\"userOriginalData\", JSON.stringify(dataForRevert.object));",
									"    //console.log(\"org get call\",pm.variables.get(\"userOriginalData\"));",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"//check user exist in user collection and that thier profileStatus is warm",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"', profileStatus \"+ responseBody.object.profileStatus, function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{updateUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{updateUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if (pm.response.code == 200) {",
									"    //if username is not given in request then exclude it from saved response from GET /user/username",
									"    //if username is not exluded then revert call (PUTuser/username) will fail since username already exist",
									"    if (requestBody.user.hasOwnProperty(\"username\") === false) {",
									"        before = JSON.parse(pm.variables.get(\"userOriginalData\"));",
									"        delete before.username;",
									"        pm.variables.set(\"userOriginalData\", JSON.stringify(before));",
									"    }",
									"    //updated username so to be able to retrive user with new username in GET user/username",
									"    // variable \"username\" needs to be set again ",
									"    else {",
									"        pm.variables.set(\"username\", requestBody.user.username);",
									"    }",
									"    // need to check if profile usernames are to be updated",
									"    // if not then they need to be deleted from saved response from GET user/username",
									"    // revert call will fail otherwise as you cant update to an already existing username",
									"    profiles = [\"facebookProfile\", \"instagramProfile\", \"pinterestProfile\",",
									"        \"twitterProfile\", \"youtubeProfile\", \"snapchatProfile\", \"blogProfile\", \"tiktokProfile\"];",
									"",
									"    for (let i = 0; i < profiles.length; ++i) ",
									"    {",
									"        //not given in request to be updated",
									"        if (requestBody.user.influencer[profiles[i]] == undefined) ",
									"        {",
									"            before = JSON.parse(pm.variables.get(\"userOriginalData\"));",
									"            delete before.influencer[profiles[i]];",
									"            pm.variables.set(\"userOriginalData\", JSON.stringify(before));",
									"        }",
									"        //if profile didn't exist before then it needs to be set to an empty object before revert put call",
									"        // keeping it as null, as original if non existent, (example \"youtubeProfile\":null) will not work for put revert call",
									"        if ( (JSON.parse(pm.environment.get(\"userOriginalData\"))).influencer[profiles[i]] ===null ) ",
									"        {",
									"            //console.log( \"tesyq\",pm.environment.get(\"userOriginalData\"))//.influencer[profiles[i]]);",
									"            before = JSON.parse(pm.variables.get(\"userOriginalData\"));",
									"            before.influencer[profiles[i]]={};",
									"            pm.variables.set(\"userOriginalData\", JSON.stringify(before));",
									"        }",
									"        ",
									"    }",
									"",
									"    pm.test(\"Status code is 200 for given username \" + pm.request.url.path[2], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //saves request to be able to check if right updates were made",
									"    pm.variables.set(\"requestedUpdate\", JSON.stringify(requestBody.user));",
									"",
									"",
									"    //verify given data numbers, email, names etc.",
									"",
									"}",
									"else if (pm.response.code == 400) {",
									"    pm.test(\"Status 400 for user \" + pm.request.url.path[2] + \" userMessage: \" + responseBody.notes.userMessage, function () {",
									"        pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Not available\",",
									"            \"That account is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",",
									"            \"Your profile must contain at least 1 channel\",",
									"            \"Instagram username contains invalid characters\", \"Facebook username contains invalid characters\",",
									"            \"Pinterest username contains invalid characters\",",
									"            \"Twitter username contains invalid characters\",",
									"            \"Youtube username contains invalid characters\",",
									"            \"Blog link cannot contain spaces\",",
									"            \"Invalid platform\",",
									"            \"Validation Error\"]);",
									"    })",
									"}",
									"// current user as identified by the session needs to authorised to update given user",
									"else if (pm.response.code == 403) {",
									"    pm.test(\"Not authorised\", function () {",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"else if (pm.response.code == 404) {",
									"    pm.test(\"Username not found\", function () {",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\":{\n        \"firstName\": \"Emelbourn\",\n       \"username\": \"melbournejade\",\n        \"displayName\": \"maelbournejadee\",\n        \"profileStatus\": \"influencer\",\n        \"influencer\":{\n            \"gender\": \"FEMALE\",\n            \"youtubeProfile\":\n            {\n                \"username\": \"melbournejade2\"\n            },\n            \"categories\":[\"hej\"],\n            \"deliveryAddresses\" : [\n            {\n                \"street1\" : \"Al\", \n                \"city\" : \"Melbourne\", \n                \"state\" : \"VIC\", \n                \"country\" : \"Australia\", \n                \"zipcode\" : \"3000\"\n            \n            }\n            ],\n                    \"phoneNumber\": \"0400000000\"\n        }\n\n\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{updateUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{updateUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Changes Were Made",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    ",
									"    pm.test(\"Update was successful, requested fields have been updated\", function(){",
									"        pm.expect(isUpdated(pm.variables.get(\"requestedUpdate\"), responseBody.object)).to.equal(true);",
									"    })",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    //check user exist in user collection and that thier profileStatus is warm",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"', profileStatus \"+ responseBody.object.profileStatus, function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"    // Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"//----------------Functions",
									"",
									"//need to be optimised, use object keys and values instead",
									"function isUpdated(request, response)",
									"{",
									"    if(request.username!=undefined && (request.username!=response.username))",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.firstName!=undefined && (request.firstName!=response.firstName))",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.lastName!=undefined && (request.lastName!=response.lastName))",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.displayName!=undefined && (request.displayName!=response.displayName))  //displayName",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.description!=undefined && (request.description!=response.description))  //description",
									"    {",
									"        return false;",
									"    } ",
									"    else if(request.profileStatus!=undefined && (request.profileStatus!=response.profileStatus))    //profileStatus",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.brand!=undefined && (request.brand!=response.brand))    //brand",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.agency!=undefined && (request.agency!=response.agency)) //agency",
									"    {",
									"        return false;",
									"    }    ",
									"    else if(request.manager!=undefined && (request.manager!=response.manager)) //manager",
									"    {",
									"        return false;",
									"    }    ",
									"    else if(request.settings!=undefined)    //settings",
									"    {",
									"        if(request.settings.emailNotifications!=undefined && ",
									"        (request.settings.emailNotifications!=response.settings.emailNotifications) )",
									"        {",
									"            return false;",
									"        }",
									"        else if (request.settings.publicViewable!=undefined && ",
									"        (request.settings.publicViewable!=response.settings.publicViewable) )",
									"        {",
									"            return false;",
									"        }",
									"        //else if (request.settings.payeeDetails!=undefined ",
									"    }",
									"    else if(request.influencer!=undefined)",
									"    {",
									"        if(request.influencer.paypalEmail!=undefined &&",
									"           (request.influencer.paypalEmail!= response.influencer.paypalEmail) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.defaultPaymentMethod!=undefined &&",
									"           (request.influencer.defaultPaymentMethod!= response.influencer.defaultPaymentMethod) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.deliveryAddresses!=undefined) //deliveryAddress list",
									"        { ",
									"            for(let i =0; i<request.influencer.deliveryAddresses.length; ++i)",
									"            {",
									"                if(request.influencer.deliveryAddresses[i].street1!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].street1!=response.influencer.deliveryAddresses[i].street1)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].street2!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].street2!=response.influencer.deliveryAddresses[i].street2)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].city!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].city!=response.influencer.deliveryAddresses[i].city)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].state!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].state!=response.influencer.deliveryAddresses[i].state)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].country!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].country!=response.influencer.deliveryAddresses[i].country)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].zipcode!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].zipcode!=response.influencer.deliveryAddresses[i].zipcode)  )",
									"                {",
									"                    return false;",
									"                }",
									"",
									"            }",
									"            ",
									"        }",
									"        else if(request.influencer.categories!=undefined)   //categories list",
									"        {",
									"            for(let i=0; i<request.influencer.categories.length; ++i)",
									"            {",
									"                if(request.influencer.categories[i]!=response.influencer.categories[i])",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        else if(request.influencer.facebookProfile!=undefined &&",
									"           (request.influencer.facebookProfile.username!=response.influencer.facebookProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.instagramProfile!=undefined &&",
									"           (request.influencer.instagramProfile.username!=response.influencer.instagramProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.pinterestProfile!=undefined &&",
									"           (request.influencer.pinterestProfile.username!=response.influencer.pinterestProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.twitterProfile!=undefined &&",
									"           (request.influencer.twitterProfile.username!=response.influencer.twitterProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.youtubeProfile!=undefined &&",
									"           (request.influencer.youtubeProfile.username!=response.influencer.youtubeProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.snapchatProfile!=undefined &&",
									"           (request.influencer.snapchatProfile.username!=response.influencer.snapchatProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.blogProfile!=undefined &&",
									"           (request.influencer.blogProfile.username!=response.influencer.blogProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.tiktokProfile!=undefined &&",
									"           (request.influencer.tiktokProfile.username!=response.influencer.tiktokProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.description!=undefined &&",
									"        (request.influencer.description!= response.influencer.description)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.descriptionLong!=undefined &&",
									"        (request.influencer.descriptionLong!= response.influencer.descriptionLong)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.paymentPreference!=undefined &&",
									"        (request.influencer.paymentPreference!= response.influencer.paymentPreference)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if (request.influencer.locations!=undefined)",
									"        {",
									"            for(let i=0; i<request.influencer.locations.length; ++i)",
									"            {",
									"                if(request.influencer.locations[i]!=response.influencer.locations[i])",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"",
									"        }",
									"        else if (request.influencer.locationsNarrow!=undefined)",
									"        {",
									"            for(let i=0; i<request.influencer.locationsNarrow.length; ++i)",
									"            {",
									"                if(request.influencer.locationsNarrow[i]!=response.influencer.locationsNarrow[i])",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"",
									"        }    ",
									"        else if (request.influencer.currentLocation!=undefined &&",
									"                    (request.influencer.currentLocation!= response.influencer.currentLocation)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if (request.influencer.languages!=undefined)",
									"        {",
									"            for(let i=0; request.influencer.languages.length; ++i)",
									"            {",
									"                if(request.influencer.languages[i]!= response.influencer.languages[i])",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        else if(request.influencer.dateOfBirth!=undefined &&",
									"                    (request.influencer.dateOfBirth!= response.influencer.dateOfBirth)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.phoneNumber!=undefined &&",
									"                    (request.influencer.phoneNumber!= response.influencer.phoneNumber)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.gender!=undefined &&",
									"                    (request.influencer.gender!= response.influencer.gender)  )",
									"        {",
									"            return false;",
									"        }           ",
									"    }",
									"",
									"    return true;    //all fields match",
									"",
									"}",
									"",
									"",
									"",
									"/*",
									"const convertedRequest = {};",
									"",
									"res = JSON.parse(pm.variables.get(\"requestedUpdate\"));",
									"pm.test(obj(res));",
									"//console.log(\"keys\",Object.entries(res.user));",
									"console.log(\"new\",convertedRequest)",
									"",
									"function obj(object)",
									"{    ",
									"    Object.entries(object).forEach((entry) => {",
									"    //const [key, value] = entry;",
									"   // console.log(`${key}: ${value}`);",
									"    //console.log(typeof value);",
									"",
									"        ",
									"        if(typeof value === \"object\")",
									"        {",
									"            obj(value);",
									"        }",
									"        else",
									"        {",
									"            convertedRequest[key]= value;",
									"            console.log(`${key}: ${value}`);    //will print without nesteling",
									"        }",
									"        ",
									"    });",
									"    ",
									"}",
									"*/",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{updateUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{updateUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert Changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"//saves request to be able to check if right updates were made",
									"pm.variables.set(\"requestedUpdate\", JSON.stringify(requestBody.user) );",
									"//console.log(pm.variables.get(\"requestedUpdate\") );",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200 for given username \"+ pm.request.url.path[2], function () {",
									"     pm.response.to.have.status(200);",
									"    });",
									"",
									"    //username has been updated in the request, in previous PUT call",
									"    //meaning the revert request body will contain the original username we want to update back to",
									"    if(requestBody.user.hasOwnProperty(\"username\")===true)",
									"    {",
									"        pm.variables.set(\"username\", requestBody.user.username);",
									"    }",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400 for user \"+pm.request.url.path[2]+ \" userMessage: \" + responseBody.notes.userMessage, function(){",
									"        pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Not available\",",
									"                                                                \"That account is already connected to Hypetap. Contact support@hypetap.com if you have any questions.\",",
									"                                                                \"Your profile must contain at least 1 channel\",",
									"                                                                \"Instagram username contains invalid characters\",\"Facebook username contains invalid characters\",",
									"                                                                   \"Pinterest username contains invalid characters\",",
									"                                                                   \"Twitter username contains invalid characters\",",
									"                                                                   \"Youtube username contains invalid characters\", ",
									"                                                                   \"Blog link cannot contain spaces\",",
									"                                                                  \"Invalid platform\",",
									"                                                                  \"Validation Error\" ]);",
									"    })",
									"}",
									"// current user as identified by the session needs to authorised to update given user",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Not authorised\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Username not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {{userOriginalData}} \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{updateUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{updateUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Changes Were Made",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //\"requestedUpdate\" will equal null if if PUT user/username fails ",
									"    // isUpdated() will return true if no checks are done, so to prevent test from passing",
									"    // a check is done to make sure PUt call returned an object",
									"    pm.test(\"Update was successful, requested fields have been updated\", function(){",
									"        pm.expect(pm.variables.get(\"requestedUpdate\")).to.not.equal(undefined);",
									"        pm.expect(isUpdated(pm.variables.get(\"requestedUpdate\"), responseBody.object)).to.equal(true);",
									"    })",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    //check user exist in user collection and that thier profileStatus is warm",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"', profileStatus \"+ responseBody.object.profileStatus, function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"    // Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"//----------------Functions",
									"",
									"//need to be optimised, use object keys and values instead",
									"function isUpdated(request, response)",
									"{",
									"    if(request.username!=undefined && (request.username!=response.username))",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.firstName!=undefined && (request.firstName!=response.firstName))",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.lastName!=undefined && (request.lastName!=response.lastName))",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.displayName!=undefined && (request.displayName!=response.displayName))  //displayName",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.description!=undefined && (request.description!=response.description))  //description",
									"    {",
									"        return false;",
									"    } ",
									"    else if(request.profileStatus!=undefined && (request.profileStatus!=response.profileStatus))    //profileStatus",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.brand!=undefined && (request.brand!=response.brand))    //brand",
									"    {",
									"        return false;",
									"    }",
									"    else if(request.agency!=undefined && (request.agency!=response.agency)) //agency",
									"    {",
									"        return false;",
									"    }    ",
									"    else if(request.manager!=undefined && (request.manager!=response.manager)) //manager",
									"    {",
									"        return false;",
									"    }    ",
									"    else if(request.settings!=undefined)    //settings",
									"    {",
									"        if(request.settings.emailNotifications!=undefined && ",
									"        (request.settings.emailNotifications!=response.settings.emailNotifications) )",
									"        {",
									"            return false;",
									"        }",
									"        else if (request.settings.publicViewable!=undefined && ",
									"        (request.settings.publicViewable!=response.settings.publicViewable) )",
									"        {",
									"            return false;",
									"        }",
									"        //else if (request.settings.payeeDetails!=undefined ",
									"    }",
									"    else if(request.influencer!=undefined)",
									"    {",
									"        if(request.influencer.paypalEmail!=undefined &&",
									"           (request.influencer.paypalEmail!= response.influencer.paypalEmail) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.defaultPaymentMethod!=undefined &&",
									"           (request.influencer.defaultPaymentMethod!= response.influencer.defaultPaymentMethod) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.deliveryAddresses!=undefined) //deliveryAddress list",
									"        { ",
									"            for(let i =0; i<request.influencer.deliveryAddresses.length; ++i)",
									"            {",
									"                if(request.influencer.deliveryAddresses[i].street1!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].street1!=response.influencer.deliveryAddresses[i].street1)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].street2!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].street2!=response.influencer.deliveryAddresses[i].street2)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].city!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].city!=response.influencer.deliveryAddresses[i].city)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].state!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].state!=response.influencer.deliveryAddresses[i].state)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].country!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].country!=response.influencer.deliveryAddresses[i].country)  )",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request.influencer.deliveryAddresses[i].zipcode!= undefined &&",
									"                ( request.influencer.deliveryAddresses[i].zipcode!=response.influencer.deliveryAddresses[i].zipcode)  )",
									"                {",
									"                    return false;",
									"                }",
									"",
									"            }",
									"            ",
									"        }",
									"        else if(request.influencer.categories!=undefined)   //categories list",
									"        {",
									"            for(let i=0; i<request.influencer.categories.length; ++i)",
									"            {",
									"                if(request.influencer.categories[i]!=response.influencer.categories[i])",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        else if(request.influencer.facebookProfile!=undefined &&",
									"           (request.influencer.facebookProfile.username!=response.influencer.facebookProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.instagramProfile!=undefined &&",
									"           (request.influencer.instagramProfile.username!=response.influencer.instagramProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.pinterestProfile!=undefined &&",
									"           (request.influencer.pinterestProfile.username!=response.influencer.pinterestProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.twitterProfile!=undefined &&",
									"           (request.influencer.twitterProfile.username!=response.influencer.twitterProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.youtubeProfile!=undefined &&",
									"           (request.influencer.youtubeProfile.username!=response.influencer.youtubeProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.snapchatProfile!=undefined &&",
									"           (request.influencer.snapchatProfile.username!=response.influencer.snapchatProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.blogProfile!=undefined &&",
									"           (request.influencer.blogProfile.username!=response.influencer.blogProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.tiktokProfile!=undefined &&",
									"           (request.influencer.tiktokProfile.username!=response.influencer.tiktokProfile.username) )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.description!=undefined &&",
									"        (request.influencer.description!= response.influencer.description)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.descriptionLong!=undefined &&",
									"        (request.influencer.descriptionLong!= response.influencer.descriptionLong)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.paymentPreference!=undefined &&",
									"        (request.influencer.paymentPreference!= response.influencer.paymentPreference)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if (request.influencer.locations!=undefined)",
									"        {",
									"            for(let i=0; i<request.influencer.locations.length; ++i)",
									"            {",
									"                if(request.influencer.locations[i]!=response.influencer.locations[i])",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"",
									"        }",
									"        else if (request.influencer.locationsNarrow!=undefined)",
									"        {",
									"            for(let i=0; i<request.influencer.locationsNarrow.length; ++i)",
									"            {",
									"                if(request.influencer.locationsNarrow[i]!=response.influencer.locationsNarrow[i])",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"",
									"        }    ",
									"        else if (request.influencer.currentLocation!=undefined &&",
									"                    (request.influencer.currentLocation!= response.influencer.currentLocation)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if (request.influencer.languages!=undefined)",
									"        {",
									"            for(let i=0; request.influencer.languages.length; ++i)",
									"            {",
									"                if(request.influencer.languages[i]!= response.influencer.languages[i])",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        else if(request.influencer.dateOfBirth!=undefined &&",
									"                    (request.influencer.dateOfBirth!= response.influencer.dateOfBirth)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.phoneNumber!=undefined &&",
									"                    (request.influencer.phoneNumber!= response.influencer.phoneNumber)  )",
									"        {",
									"            return false;",
									"        }",
									"        else if(request.influencer.gender!=undefined &&",
									"                    (request.influencer.gender!= response.influencer.gender)  )",
									"        {",
									"            return false;",
									"        }           ",
									"    }",
									"",
									"    return true;    //all fields match",
									"",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{updateUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{updateUsername}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DEL Socials for Deleted Inf -- FINAL",
			"item": [
				{
					"name": "Verify User Exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(responseBody.object!=null)",
									"{",
									"    pm.test(\"Given users profileStatus is deleted\", function(){",
									"        pm.expect(responseBody.object.profileStatus).to.equal(\"deleted\");",
									"    })",
									"",
									"    pm.test(\"User have social channels\", function () {",
									"        pm.expect(",
									"            (responseBody.object.influencer.facebookProfile) || ",
									"            (responseBody.object.influencer.instagramProfile) ||",
									"            (responseBody.object.influencer.pinterestProfile)||",
									"            (responseBody.object.influencer.twitterProfile)||",
									"            (responseBody.object.influencer.youtubeProfile)||",
									"            (responseBody.object.influencer.snapchatProfile)||",
									"            (responseBody.object.influencer.blogProfile)||",
									"            (responseBody.object.influencer.tiktokProfile)",
									"            ).to.not.equal(null);",
									"",
									"    });",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"User is an agency or manager and contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/qv_allsocial",
							"host": [
								"{{test}}user"
							],
							"path": [
								"qv_allsocial"
							]
						}
					},
					"response": []
				},
				{
					"name": "DEL Social Channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"// need to be deleted first, profilestatus == deleted",
									"// The user object returned should match the requested user object if call is successfull",
									"if (pm.response.code == 200) {",
									"",
									"",
									"    pm.test(\"Successfully deleted social channel for '\" + pm.request.url.path[2]+ \"' \", function(){",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"    ",
									"",
									"    pm.test(\"Status is \" + pm.response.code);",
									"",
									"}",
									"// Depending on what status, (400, 403) different error messages will be shown",
									"//A user object  should not be return if call is unsuccessful",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Unsuccessful, user has to be deleted first. ProfileStatus for '\" + pm.request.url.path[2] + \"' is not deleted.\", function () {",
									"        pm.expect(responseBody.notes.userMessage).to.equals(\"User must already have been deleted and must have been an influencer\")",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"    pm.test(\"Status is \" + pm.response.code);   //to display status which is already known if test is executed",
									"}",
									"//Call is only allowed for Hypetap users",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Call is only allowed for Hypetap users, returns empty user object\", function () {",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"    pm.test(\"Status is \" + pm.response.code);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cont",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/qv_allsocial/delete_social_channels",
							"host": [
								"{{test}}user"
							],
							"path": [
								"qv_allsocial",
								"delete_social_channels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify If Data Has Been Deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(responseBody.object!=null)",
									"{",
									"        pm.test(\"Given users profileStatus is deleted\", function(){",
									"        pm.expect(responseBody.object.profileStatus).to.equal(\"deleted\");",
									"    })",
									"",
									"    pm.test(\"All social channels are deleted\", function () {",
									"        pm.expect(responseBody.object.influencer.facebookProfile).to.equal(null); ",
									"        pm.expect(responseBody.object.influencer.instagramProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.pinterestProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.twitterProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.youtubeProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.snapchatProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.blogProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.tiktokProfile).to.equal(null);",
									"",
									"    });",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"User is an agency or manager and contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/qv_allsocial",
							"host": [
								"{{test}}user"
							],
							"path": [
								"qv_allsocial"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DEL Socials -- FINAL",
			"item": [
				{
					"name": "Users Exist and profileStatus Is Correct",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(responseBody.object!=null)",
									"{",
									"    pm.test(\"Given user is a influencer, warminfluencer or pendinginfluencer \", function(){",
									"        pm.expect(responseBody.object.profileStatus).to.be.oneOf([\"influencer\", \"warminfluencer\",\"pendinginfluencer\"]);",
									"    })",
									"",
									"    pm.test(\"User have social channels\", function () {",
									"        pm.expect(",
									"            (responseBody.object.influencer.facebookProfile) || ",
									"            (responseBody.object.influencer.instagramProfile) ||",
									"            (responseBody.object.influencer.pinterestProfile)||",
									"            (responseBody.object.influencer.twitterProfile)||",
									"            (responseBody.object.influencer.youtubeProfile)||",
									"            (responseBody.object.influencer.snapchatProfile)||",
									"            (responseBody.object.influencer.blogProfile)||",
									"            (responseBody.object.influencer.tiktokProfile)",
									"            ).to.not.equal(null);",
									"",
									"    });",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"User is an agency or manager and contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{deleteSocialsUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{deleteSocialsUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteSocialChannels",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"// need to be deleted first, profilestatus == deleted",
									"// The user object returned should match the requested user object if call is successfull",
									"if (pm.response.code == 200) {",
									"",
									"",
									"    pm.test(\"Successfully deleted social channel for '\" + pm.request.url.path[2]+ \"' \", function(){",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"    ",
									"",
									"    pm.test(\"Status is \" + pm.response.code);",
									"",
									"}",
									"// user must be influencer, warminfluencer or pendinginfluencer",
									"// Depending on what status, (400, 403) different error messages will be shown",
									"//A user object  should not be return if call is unsuccessful",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Unsuccessful, user has to have the right profileStatus. ProfileStatus for '\" + pm.request.url.path[2] + \"' is not deleted.\", function () {",
									"        pm.expect(responseBody.notes.userMessage).to.be.oneOf([",
									"                                    \"User must already have been deleted and must have been an influencer\",",
									"                                    \"User must be influencer, warminfluencer or pendinginfluencer\"]);",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"    pm.test(\"Status is \" + pm.response.code);",
									"}",
									"//Call is only allowed for Hypetap users",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Call is only allowed for Hypetap users, returns empty user object\", function () {",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"    pm.test(\"Status is \" + pm.response.code);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{deleteSocialsUsername}}?deleteSocialChannels=true",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{deleteSocialsUsername}}"
							],
							"query": [
								{
									"key": "deleteSocialChannels",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Profiles Are Deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(responseBody.object!=null)",
									"{",
									"        pm.test(\"Given users profileStatus is deleted\", function(){",
									"        pm.expect(responseBody.object.profileStatus).to.equal(\"deleted\");",
									"    })",
									"",
									"    pm.test(\"All social channels are deleted\", function () {",
									"        pm.expect(responseBody.object.influencer.facebookProfile).to.equal(null); ",
									"        pm.expect(responseBody.object.influencer.instagramProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.pinterestProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.twitterProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.youtubeProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.snapchatProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.blogProfile).to.equal(null);",
									"        pm.expect(responseBody.object.influencer.tiktokProfile).to.equal(null);",
									"",
									"    });",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"User is an agency or manager and contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{deleteSocialsUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{deleteSocialsUsername}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add, Delete, Add Cover Image to Session User -- FINAL",
			"item": [
				{
					"name": "BOSS Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cover Image Exists for Session User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Given user has a coverImage\", function(){",
									"        pm.expect(responseBody.object.coverImage).to.not.equal(null);",
									"    })",
									"",
									"    //check user exist in user collection",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/brookeshields",
							"host": [
								"{{test}}user"
							],
							"path": [
								"brookeshields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cover Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200, updated cover image\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns current session of username '\"+responseBody.session.authUser+\"'\", function(){",
									"    pm.expect(responseBody.session).to.not.equal(null);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"file\":{\n    \"contentType\":\"image/png\",\n    \"bytes\":\"\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/cover",
							"host": [
								"{{test}}user"
							],
							"path": [
								"cover"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Added Cover Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Given user has a coverImage\", function(){",
									"        pm.expect(responseBody.object.coverImage).to.not.equal(null);",
									"    })",
									"",
									"    //check user exist in user collection",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/brookeshields",
							"host": [
								"{{test}}user"
							],
							"path": [
								"brookeshields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Session Users Cover Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Doesn't return any user object when successfull, only return the session ",
									"    pm.test(\"Successfully deleted cover image for '\" + responseBody.session.authUser + \"'. Status is 200\", function(){",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Unsuccessful, status is \"+pm.response.code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{test}}user/cover",
							"host": [
								"{{test}}user"
							],
							"path": [
								"cover"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Image Is Deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Given user doesn't have a coverImage\", function(){",
									"        pm.expect(responseBody.object.coverImage).to.equal(null);",
									"    })",
									"",
									"    //check user exist in user collection",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/brookeshields",
							"host": [
								"{{test}}user"
							],
							"path": [
								"brookeshields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Cover Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200, updated cover image\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns current session of username '\"+responseBody.session.authUser+\"'\", function(){",
									"    pm.expect(responseBody.session).to.not.equal(null);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"file\":{\n    \"contentType\":\"image/png\",\n    \"bytes\":\"\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/cover",
							"host": [
								"{{test}}user"
							],
							"path": [
								"cover"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Added Cover Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Given user has a coverImage\", function(){",
									"        pm.expect(responseBody.object.coverImage).to.not.equal(null);",
									"    })",
									"",
									"    //check user exist in user collection",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/brookeshields",
							"host": [
								"{{test}}user"
							],
							"path": [
								"brookeshields"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add-Delete-Add Profile Image to Session User -- FINAL",
			"item": [
				{
					"name": "BOSS Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify If Current Session User has Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Delete image deletes image for current user so username in path needs to be of the current session user for these tests to work",
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Given user has a profileImage\", function(){",
									"        pm.expect(responseBody.object.profileImage).to.not.equal(null);",
									"    })",
									"",
									"    //check user exist in user collection",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/brookeshields",
							"host": [
								"{{test}}user"
							],
							"path": [
								"brookeshields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Profile Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns current session of username '\"+responseBody.session.authUser+\"'\", function(){",
									"    pm.expect(responseBody.session).to.not.equal(null);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"file\":{\n    \"contentType\":\"image/png\",\n    \"bytes\":\"\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/image",
							"host": [
								"{{test}}user"
							],
							"path": [
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Added Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Delete image deletes image for current user so username in path needs to be of the current session user for these tests to work",
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Given user has a profileImage\", function(){",
									"        pm.expect(responseBody.object.profileImage).to.not.equal(null);",
									"    })",
									"",
									"    //check user exist in user collection",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/brookeshields",
							"host": [
								"{{test}}user"
							],
							"path": [
								"brookeshields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Doesn't return any user object when successfull, only return the session ",
									"    pm.test(\"Successfully deleted profile image for '\" + responseBody.session.authUser + \"'. Status is 200\", function(){",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Unsuccessful, status is \"+pm.response.code);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/image",
							"host": [
								"{{test}}user"
							],
							"path": [
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Image Was Deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Given users profileImage is deleted\", function(){",
									"        pm.expect(responseBody.object.profileImage).to.equal(null);",
									"    })",
									"",
									"    //check user exist in user collection",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/brookeshields",
							"host": [
								"{{test}}user"
							],
							"path": [
								"brookeshields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Profile Image to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns current session of username '\"+responseBody.session.authUser+\"'\", function(){",
									"    pm.expect(responseBody.session).to.not.equal(null);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"file\":{\n    \"contentType\":\"image/png\",\n    \"bytes\":\"\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/image",
							"host": [
								"{{test}}user"
							],
							"path": [
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Image Was Added",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Delete image deletes image for current user so username in path needs to be of the current session user for these tests to work",
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Given user has a profileImage\", function(){",
									"        pm.expect(responseBody.object.profileImage).to.not.equal(null);",
									"    })",
									"",
									"    //check user exist in user collection",
									"    pm.test(\"User exist in user collection. Given username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/brookeshields",
							"host": [
								"{{test}}user"
							],
							"path": [
								"brookeshields"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Emancipate and Adopt - Warm and No Old AuthId (Always Managed)",
			"item": [
				{
					"name": "Hypetap BOSS Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Exist (Saves Username)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var influencer;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found. Will save username of found user",
									"    //in function: pm.variables.set(\"usernameEmancipate\", response[i].body.username);",
									"    pm.test(\"User exist in user collection and is managed\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"userIdEmancipate\"))).to.equal(true);",
									"    } )",
									"",
									"        pm.test(\"influencer is managed and has the profileStatus \" + influencer.profileStatus, function(){",
									"        pm.expect(influencer.isManaged).to.equal(true);",
									"",
									"    })",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if( (response[i].body.id==userId))",
									"        {",
									"            influencer= response[i].body;",
									"            pm.variables.set(\"usernameEmancipate\", response[i].body.username);",
									"            console.log(response[i].body.username)",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=influencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// to keep track of how many users auth have access to",
									"pm.variables.set(\"totalUsersForAuth\", responseBody.object.length);",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"usernameEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameEmancipate\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap BOSS Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Emancipate (Backend Call Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//generates warmy",
									"//and deletes influencer from old sso",
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId and email, (required fields)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"    pm.expect(requestBody.email).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Emancipated userId: \"+ requestBody.userId);",
									"",
									"    if(responseBody.object.recallToken!=undefined)",
									"    {",
									"        pm.test(\"Influencer doesn't have an old authentication, (has always been managed). Returned recallToken is: \" + responseBody.object.recallToken)",
									"        pm.variables.set(\"recallToken\", responseBody.object.recallToken);",
									"        pm.variables.set(\"emailEmancipate\", requestBody.email);",
									"    }",
									"",
									"}",
									"//400 invalid email",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"{{userIdEmancipate}}\",\n    \"email\": \"dumbanddummy1+hollyt@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt/emancipate",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt",
								"emancipate"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Exist as Warminfluencer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var emancipatedUser;",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found.",
									"    pm.test(\"User exist in user collection and is now a warminfluencer and not managed\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"userIdEmancipate\"))).to.equal(true);",
									"        pm.expect(emancipatedUser.profileStatus).to.equal(\"warminfluencer\")",
									"        pm.expect(emancipatedUser.isManaged).to.equal(false)",
									"    } )",
									"",
									"    pm.test(\"RecallToken and email is the same as the one generated in PUT emancipate\", function(){",
									"        pm.expect(emancipatedUser.recallToken).to.equal( pm.variables.get(\"recallToken\"));",
									"        pm.expect(emancipatedUser.email).to.equal(pm.variables.get(\"emailEmancipate\"));",
									"    })",
									"",
									"    //if creator has more than one ssoHistory entry then we get the latest one",
									"    if(emancipatedUser.ssoHistory.length>1)",
									"    {",
									"        pm.variables.set(\"oldSSO\", getLatesSsoHistory(emancipatedUser.ssoHistory).oldSsoId);",
									"    }",
									"    else",
									"    {",
									"        pm.variables.set(\"oldSSO\", emancipatedUser.ssoHistory[0].oldSsoId);",
									"    }    ",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].body.id==userId)",
									"        {",
									"            emancipatedUser= response[i].body;",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}",
									"",
									"function getLatesSsoHistory(ssoHistory)",
									"{",
									"    for(let i=0; i<ssoHistory.length;++i)       //0 1 2 3",
									"    {",
									"        if(i==ssoHistory.length-1)    //last in list",
									"        {",
									"            if(Date.parse(latesSsoHistory.date)>Date.parse(ssoHistory[i].date))",
									"            {",
									"                return latesSsoHistory;",
									"            }",
									"            else",
									"            {",
									"                return ssoHistory[i]",
									"            }",
									"",
									"        }",
									"        else",
									"        {",
									"            latesSsoHistory= ssoHistory[i];",
									"            if(Date.parse(latesSsoHistory.date) < Date.parse(ssoHistory[i+1].date))",
									"            {",
									"                latesSsoHistory= ssoHistory[i+1];",
									"            }      ",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=warminfluencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "warminfluencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Not Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \" +responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth is not part of requested user: \"+pm.variables.get(\"usernameEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameEmancipate\"))).to.equal(false);",
									"});",
									"",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap BOSS Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adopt Warminfluencer (Revert)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId and managerSso, (required fields)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"    pm.expect(requestBody.managerSso).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Adds userId  '\"+ requestBody.userId +\"' to oldSSO with the ssoId \" +requestBody.managerSso);",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.status==404)",
									"{",
									"    pm.test(\"Status 404, not found. Make sure managerSso and userId exist\");",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"managerSso\":\"{{oldSSO}}\",\n    \"userId\": \"{{userIdEmancipate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt/warm",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt",
								"warm"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Exist as Influencer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var adoptedUser;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found. Will save username of found user",
									"    //in function: pm.variables.set(\"usernameEmancipate\", response[i].body.username);",
									"    pm.test(\"User exist in user collection, is managed and have profileStatus influencer \", function(){",
									"        pm.expect(userExistAndIsManaged(responseBody.page.content, pm.variables.get(\"userIdEmancipate\"))).to.equal(true);",
									"        pm.expect(adoptedUser.isManaged).to.equal(true);",
									"        pm.expect(adoptedUser.profileStatus).to.equal(\"influencer\");",
									"    } )",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExistAndIsManaged(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if( (response[i].body.id==userId))",
									"        {",
									"            adoptedUser= response[i].body;",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=influencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// to keep track of how many users auth have access to",
									"pm.variables.set(\"totalUsersForAuth\", responseBody.object.length);",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"usernameEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameEmancipate\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Emancipate and Adopt - Active INF",
			"item": [
				{
					"name": "Hypetap BOSS Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Exist (Saves Username)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var influencer;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found. Will save username of found user",
									"    //in function: pm.variables.set(\"usernameEmancipate\", response[i].body.username);",
									"    pm.test(\"User exist in user collection and is managed\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"userIdEmancipate\"))).to.equal(true);",
									"    } )",
									"",
									"        pm.test(\"influencer is managed and has the profileStatus \" + influencer.profileStatus, function(){",
									"        pm.expect(influencer.isManaged).to.equal(true);",
									"",
									"    })",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if( (response[i].body.id==userId))",
									"        {",
									"            influencer= response[i].body;",
									"            pm.variables.set(\"usernameEmancipate\", response[i].body.username);",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=influencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// to keep track of how many users auth have access to",
									"pm.variables.set(\"totalUsersForAuth\", responseBody.object.length);",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"usernameEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameEmancipate\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap BOSS Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Emancipate (Backend Call Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//generates warmy",
									"//and deletes influencer from old sso",
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId and email, (required fields)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"    pm.expect(requestBody.email).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Emancipated userId: \"+ requestBody.userId);",
									"",
									"    if(responseBody.object.recallToken!=undefined)",
									"    {",
									"        pm.test(\"Influencer doesn't have an old authentication, (has always been managed). Returned recallToken is: \" + responseBody.object.recallToken)",
									"        pm.variables.set(\"recallToken\", responseBody.object.recallToken);",
									"        pm.variables.set(\"emailEmancipate\", requestBody.email);",
									"    }",
									"",
									"}",
									"//400 invalid email",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"{{userIdEmancipate}}\",\n    \"email\" : \"a.hypetap+zephyr@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt/emancipate",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt",
								"emancipate"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Exist as Warminfluencer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var emancipatedUser;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found.",
									"    pm.test(\"User exist in user collection and is now a warminfluencer and not managed\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"userIdEmancipate\"))).to.equal(true);",
									"        pm.expect(emancipatedUser.profileStatus).to.equal(\"warminfluencer\")",
									"        pm.expect(emancipatedUser.isManaged).to.equal(false)",
									"    } )",
									"",
									"    pm.test(\"RecallToken and email is the same as the one generated in PUT emancipate\", function(){",
									"        pm.expect(emancipatedUser.recallToken).to.equal( pm.variables.get(\"recallToken\"));",
									"        pm.expect(emancipatedUser.email).to.equal(pm.variables.get(\"emailEmancipate\"));",
									"    })",
									"",
									"    //if creator has more than one ssoHistory entry then we get the latest one",
									"    if(emancipatedUser.ssoHistory.length>1)",
									"    {",
									"        pm.variables.set(\"oldSSO\", getLatesSsoHistory(emancipatedUser.ssoHistory).oldSsoId);",
									"    }",
									"    else",
									"    {",
									"        pm.variables.set(\"oldSSO\", emancipatedUser.ssoHistory[0].oldSsoId);",
									"    } ",
									"    ",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].body.id==userId)",
									"        {",
									"            emancipatedUser= response[i].body;",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}",
									"",
									"",
									"function getLatesSsoHistory(ssoHistory)",
									"{",
									"    for(let i=0; i<ssoHistory.length;++i)       //0 1 2 3",
									"    {",
									"        if(i==ssoHistory.length-1)    //last in list",
									"        {",
									"            if(Date.parse(latesSsoHistory.date)>Date.parse(ssoHistory[i].date))",
									"            {",
									"                return latesSsoHistory;",
									"            }",
									"            else",
									"            {",
									"                return ssoHistory[i]",
									"            }",
									"",
									"        }",
									"        else",
									"        {",
									"            latesSsoHistory= ssoHistory[i];",
									"            if(Date.parse(latesSsoHistory.date) < Date.parse(ssoHistory[i+1].date))",
									"            {",
									"                latesSsoHistory= ssoHistory[i+1];",
									"            }      ",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=warminfluencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "warminfluencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Not Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \" +responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth is not part of requested user: \"+pm.variables.get(\"usernameEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameEmancipate\"))).to.equal(false);",
									"});",
									"",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap BOSS login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adopt warminfluencer (revert)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId and managerSso, (required fields)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"    pm.expect(requestBody.managerSso).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Adds userId  '\"+ requestBody.userId +\"' to oldSSO with the ssoId \" +requestBody.managerSso);",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.status==404)",
									"{",
									"    pm.test(\"Status 404, not found. Make sure managerSso and userId exist\");",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"managerSso\":\"{{oldSSO}}\",\n    \"userId\": \"{{userIdEmancipate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt/warm",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt",
								"warm"
							]
						}
					},
					"response": []
				},
				{
					"name": "User exist as Influencer (save username) Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var adoptedUser;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found. Will save username of found user",
									"    //in function: pm.variables.set(\"usernameEmancipate\", response[i].body.username);",
									"    pm.test(\"User exist in user collection, is managed and have profileStatus influencer \", function(){",
									"        pm.expect(userExistAndIsManaged(responseBody.page.content, pm.variables.get(\"userIdEmancipate\"))).to.equal(true);",
									"        pm.expect(adoptedUser.isManaged).to.equal(true);",
									"        pm.expect(adoptedUser.profileStatus).to.equal(\"influencer\");",
									"    } )",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExistAndIsManaged(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if( (response[i].body.id==userId))",
									"        {",
									"            adoptedUser= response[i].body;",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=influencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is part of auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// to keep track of how many users auth have access to",
									"pm.variables.set(\"totalUsersForAuth\", responseBody.object.length);",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"usernameEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameEmancipate\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Adopt and Emancipate - User With Old Auth (Without email, Not Always Managed)",
			"item": [
				{
					"name": "Hypetap BOSS login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User exist as Influencer (saves username)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var influencer;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found. Will save username of found user",
									"    pm.test(\"User exist in user collection\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"adoptEmancipateInfluencerId\"))).to.equal(true);",
									"    } )",
									"",
									"    pm.test(\"influencer has the profileStatus 'influencer' and is not managed\", function(){",
									"        pm.expect(influencer.profileStatus).to.equal(\"influencer\");",
									"        pm.expect(influencer.isManaged).to.equal(false);",
									"",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if( (response[i].body.id==userId))",
									"        {",
									"            influencer=response[i].body;",
									"            pm.variables.set(\"usernameAdoptEmancipate\", response[i].body.username);",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=influencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adopt influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId and managerSso, (required fields)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"    pm.expect(requestBody.managerSso).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Adds userId  '\"+ requestBody.userId +\"' to oldSSO with the ssoId \" +requestBody.managerSso);",
									"",
									"}",
									"//400 if oldSSO and newSSO is the same",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.status==404)",
									"{",
									"    pm.test(\"Status 404, not found. Make sure managerSso and userId exist\");",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"managerSso\":\"{{adoptEmancipateToSsoId}}\",\n    \"userId\": \"{{adoptEmancipateInfluencerId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt"
							]
						}
					},
					"response": []
				},
				{
					"name": "User exist and is managed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var influencer;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found. Will save username of found user",
									"    pm.test(\"User exist in user collection\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"adoptEmancipateInfluencerId\"))).to.equal(true);",
									"    } )",
									"",
									"    pm.test(\"influencer has the profileStatus 'influencer' and is managed\", function(){",
									"        pm.expect(influencer.profileStatus).to.equal(\"influencer\");",
									"        pm.expect(influencer.isManaged).to.equal(true);",
									"",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if( (response[i].body.id==userId))",
									"        {",
									"            influencer=response[i].body;",
									"            pm.variables.set(\"usernameAdoptEmancipate\", response[i].body.username);",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=influencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is part of auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// to keep track of how many users auth have access to",
									"pm.variables.set(\"totalUsersForAuth\", responseBody.object.length);",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"usernameAdoptEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameAdoptEmancipate\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap BOSS login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Emancipate (backend call only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId, (required field)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Emancipated userId: \"+ requestBody.userId);",
									"",
									"}",
									"//400 invalid email",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"{{adoptEmancipateInfluencerId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt/emancipate",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt",
								"emancipate"
							]
						}
					},
					"response": []
				},
				{
					"name": "User exist and is not managed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var emancipatedUser;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found.",
									"    pm.test(\"User exist in user collection\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"adoptEmancipateInfluencerId\"))).to.equal(true);",
									"    } )",
									"",
									"    pm.test(\"influencer has the profileStatus 'influencer' and is not managed\", function(){",
									"        pm.expect(emancipatedUser.profileStatus).to.equal(\"influencer\");",
									"        pm.expect(emancipatedUser.isManaged).to.equal(false);",
									"",
									"    })",
									"",
									"",
									"",
									"    //checks what the current date is to be sure that the oldSSOId is the id of the most recent SSO",
									"    //ssiHistory is a list cannot be sure that the first ssoID is the newest",
									"    const moment = require('moment');",
									"    pm.variables.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));",
									"    //console.log(pm.variables.get(\"timestamp\"));",
									"",
									"    //saves olsSSO to be able to add/adopt influencer back to old SSO",
									"    for(let i=0; i<emancipatedUser.ssoHistory.length;++i)",
									"    {",
									"        if(emancipatedUser.ssoHistory[i].date.search(pm.variables.get(\"timestamp\"))!=-1)",
									"        {",
									"            pm.variables.set(\"oldSsoId\", emancipatedUser.ssoHistory[i].oldSsoId)",
									"            //console.log(pm.variables.get(\"oldSsoId\"));        ",
									"        }",
									"    }",
									"    ",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].body.id==userId)",
									"        {",
									"            emancipatedUser= response[i].body;",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "warminfluencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is not part of auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \" +responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth is not part of requested user: \"+pm.variables.get(\"usernameAdoptEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameAdoptEmancipate\"))).to.equal(false);",
									"});",
									"",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Adopt and Emancipate - User With Old Auth (With Email, Not Always Managed)",
			"item": [
				{
					"name": "Hypetap BOSS login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User exist as Influencer (saves username)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var influencer;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found. Will save username of found user",
									"    pm.test(\"User exist in user collection\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"adoptEmancipateInfluencerId\"))).to.equal(true);",
									"    } )",
									"",
									"    pm.test(\"influencer has the profileStatus 'influencer' and is not managed\", function(){",
									"        pm.expect(influencer.profileStatus).to.equal(\"influencer\");",
									"        pm.expect(influencer.isManaged).to.equal(false);",
									"",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if( (response[i].body.id==userId))",
									"        {",
									"            influencer=response[i].body;",
									"            pm.variables.set(\"usernameAdoptEmancipate\", response[i].body.username);",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=influencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adopt influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId and managerSso, (required fields)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"    pm.expect(requestBody.managerSso).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Adds userId  '\"+ requestBody.userId +\"' to oldSSO with the ssoId \" +requestBody.managerSso);",
									"",
									"}",
									"//400 if oldSSO and newSSO is the same",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.status==404)",
									"{",
									"    pm.test(\"Status 404, not found. Make sure managerSso and userId exist\");",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"managerSso\":\"{{adoptEmancipateToSsoId}}\",\n    \"userId\": \"{{adoptEmancipateInfluencerId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt"
							]
						}
					},
					"response": []
				},
				{
					"name": "User exist and is managed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var influencer;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found. Will save username of found user",
									"    pm.test(\"User exist in user collection\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"adoptEmancipateInfluencerId\"))).to.equal(true);",
									"    } )",
									"",
									"    pm.test(\"influencer has the profileStatus 'influencer' and is managed\", function(){",
									"        pm.expect(influencer.profileStatus).to.equal(\"influencer\");",
									"        pm.expect(influencer.isManaged).to.equal(true);",
									"",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if( (response[i].body.id==userId))",
									"        {",
									"            influencer=response[i].body;",
									"            pm.variables.set(\"usernameAdoptEmancipate\", response[i].body.username);",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=influencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is part of auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// to keep track of how many users auth have access to",
									"pm.variables.set(\"totalUsersForAuth\", responseBody.object.length);",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"usernameAdoptEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameAdoptEmancipate\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap BOSS login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Emancipate (backend call only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId, (required field)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Emancipated userId: \"+ requestBody.userId);",
									"",
									"}",
									"//400 invalid email",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"{{adoptEmancipateInfluencerId}}\",\n    \"email\": \"a.hypetap+jen@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt/emancipate",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt",
								"emancipate"
							]
						}
					},
					"response": []
				},
				{
					"name": "User exist and is not managed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var emancipatedUser;",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found.",
									"    pm.test(\"User exist in user collection\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"adoptEmancipateInfluencerId\"))).to.equal(true);",
									"    } )",
									"",
									"    pm.test(\"influencer has the profileStatus 'influencer' and is not managed\", function(){",
									"        pm.expect(emancipatedUser.profileStatus).to.equal(\"influencer\");",
									"        pm.expect(emancipatedUser.isManaged).to.equal(false);",
									"",
									"    })",
									"",
									"",
									"",
									"    //checks what the current date is to be sure that the oldSSOId is the id of the most recent SSO",
									"    //ssiHistory is a list cannot be sure that the first ssoID is the newest",
									"    const moment = require('moment');",
									"    pm.variables.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));",
									"    //console.log(pm.variables.get(\"timestamp\"));",
									"",
									"    //saves olsSSO to be able to add/adopt influencer back to old SSO",
									"    for(let i=0; i<emancipatedUser.ssoHistory.length;++i)",
									"    {",
									"        if(emancipatedUser.ssoHistory[i].date.search(pm.variables.get(\"timestamp\"))!=-1)",
									"        {",
									"            pm.variables.set(\"oldSsoId\", emancipatedUser.ssoHistory[i].oldSsoId)",
									"            //console.log(pm.variables.get(\"oldSsoId\"));        ",
									"        }",
									"    }",
									"    ",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].body.id==userId)",
									"        {",
									"            emancipatedUser= response[i].body;",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "warminfluencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is not part of auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \" +responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth is not part of requested user: \"+pm.variables.get(\"usernameAdoptEmancipate\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"usernameAdoptEmancipate\"))).to.equal(false);",
									"});",
									"",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG  Emancipate (Existing Email, Deletes User from SSO Even Though Call Returns 400)",
			"item": [
				{
					"name": "TM login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+mot@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is part of auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"negUsernameEmancipatePart2\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"negUsernameEmancipatePart2\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap BOSS login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Emancipate (backend call only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//generates warmy",
									"//and deletes influencer from old sso",
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId and email, (required fields)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"    pm.expect(requestBody.email).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"pm.variables.set(\"negUserIdEmancipate\", requestBody.userId)",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Emancipated userId: \"+ requestBody.userId);",
									"",
									"    if(responseBody.object.recallToken!=undefined)",
									"    {",
									"        pm.test(\"Influencer doesn't have an old authentication, (has always been managed). Returned recallToken is: \" + responseBody.object.recallToken)",
									"        pm.variables.set(\"recallToken\", responseBody.object.recallToken);",
									"        pm.variables.set(\"emailEmancipate\", requestBody.email);",
									"    }",
									"",
									"}",
									"//400 invalid email",
									"else if(pm.response.code==400)",
									"{",
									"    pm.variables.set(\"emancipateStatus200\", false)",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"{{negUserIdEmancipate}}\",\n    \"email\": \"dumbanddummy1+brooke@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt/emancipate",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt",
								"emancipate"
							]
						}
					},
					"response": []
				},
				{
					"name": "User exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var emancipatedUser;",
									"",
									"if((pm.response.code==200) && (pm.variables.get(\"emancipateStatus200\") == true))",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\");",
									"",
									"    //is true if user id is found.",
									"    pm.test(\"User exist in user collection and is still managed\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"negUserIdEmancipate\"))).to.equal(true);",
									"        //pm.expect(emancipatedUser.profileStatus).to.equal(\"influencer\")",
									"        pm.expect(emancipatedUser.isManaged).to.equal(true)",
									"    } )",
									"",
									"    pm.test(\"RecallToken and email is the same as the one generated in PUT emancipate\", function(){",
									"        pm.expect(emancipatedUser.recallToken).to.equal( pm.variables.get(\"recallToken\"));",
									"        pm.expect(emancipatedUser.email).to.equal(pm.variables.get(\"emailEmancipate\"));",
									"    })",
									"",
									"    //checks what the current date is to be sure that the oldSSOId is the id of the most recent SSO",
									"    //ssiHistory is a list cannot be sure that the first ssoID is the newest",
									"    const moment = require('moment');",
									"    pm.variables.set(\"timestamp\", moment().format(\"YYYY-MM-DD\"));",
									"    //console.log(pm.variables.get(\"timestamp\"));",
									"",
									"    //saves olsSSO to be able to add/adopt influencer back to old SSO",
									"    for(let i=0; i<emancipatedUser.ssoHistory.length;++i)",
									"    {",
									"        if(emancipatedUser.ssoHistory[i].date.search(pm.variables.get(\"timestamp\"))!=-1)",
									"        {",
									"            pm.variables.set(\"oldSsoId\", emancipatedUser.ssoHistory[i].oldSsoId)",
									"            //console.log(pm.variables.get(\"oldSsoId\"));        ",
									"        }",
									"    }",
									"    ",
									"}",
									"else if((pm.response.code ==200) && (pm.variables.get(\"emancipateStatus200\")==false))",
									"{",
									"    pm.test(\"User exist in user collection\", function(){",
									"        pm.expect(userExist(responseBody.page.content, pm.variables.get(\"negUserIdEmancipate\"))).to.equal(true);",
									"    } )",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function userExist(response, userId)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].body.id==userId)",
									"        {",
									"            emancipatedUser= response[i].body;",
									"            return true;",
									"        }      ",
									"    }",
									"    return false;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=influencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+mot@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is part of auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"",
									"//for this negative test the user should not have been removed from the sso since the Emancipate call failed",
									"// this is a bug",
									"pm.test(\"BUG - Auth has access to requested user: \"+pm.variables.get(\"negUsernameEmancipatePart2\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"negUsernameEmancipatePart2\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Adopt Brand",
			"item": [
				{
					"name": "TM login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+tm@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is part of auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth doesn't has access to requested user: \"+\"sufficient_for_collab\", function(){",
									"    pm.expect(containsUsername(responseBody.object, \"sufficient_for_collab\")).to.equal(false);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap BOSS login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adopt Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Request contains userId and managerSso, (required fields)\", function(){",
									"    pm.expect(requestBody.userId).to.not.be.oneOf([\"\", null, undefined]);",
									"    pm.expect(requestBody.managerSso).to.not.be.oneOf([\"\", null, undefined]);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Adds userId  '\"+ requestBody.userId +\"' to oldSSO with the ssoId \" +requestBody.managerSso);",
									"",
									"}",
									"//400 if oldSSO and newSSO is the same",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage);",
									"",
									"}",
									"else if(pm.response.status==404)",
									"{",
									"    pm.test(\"Status 404, not found. Make sure managerSso and userId exist\");",
									"}",
									"else if(pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418. Make sure current session is BOSS\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"managerSso\":\"61244f412181370b44fdd24f\",\n    \"userId\": \"590c02f4a9ed972d57508d11\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/adopt",
							"host": [
								"{{test}}user"
							],
							"path": [
								"adopt"
							]
						}
					},
					"response": []
				},
				{
					"name": "TM login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+tm@gmail.com",
									"description": "a.hypetap+janet@gmail.com, a.hypetap+cmc@gmail.com, dumbanddummy1+barbaraann@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is part of auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Brand 'sufficient_for_collab' has not been added to auth\", function(){",
									"    pm.expect(containsUsername(responseBody.object, \"sufficient_for_collab\")).to.equal(false);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET User",
			"item": [
				{
					"name": "LOGIN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "rememberMe",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/warm/{recallToken}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned and that the object containing user object isn't null",
									"if(pm.response.code ==200)",
									"{",
									"    pm.test(\"Returned user with email '\"+ responseBody.email +\"' and profileStatus '\" ",
									"        + responseBody.warmStatus+\".\", function(){",
									"            //pm.expect(responseBody.object).to.not.equal(null);",
									"        })",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Invalid recallToken given: '\" + pm.request.url.path[3]+\"'\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"Invalid recallToken\");",
									"    })",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/warm/f8f617f9-63c0-4b2a-9e53-6f587a50c066-9e6ba12a-87d4-42fb-9749-d2a0e6a1ee70",
							"host": [
								"{{test}}user"
							],
							"path": [
								"warm",
								"f8f617f9-63c0-4b2a-9e53-6f587a50c066-9e6ba12a-87d4-42fb-9749-d2a0e6a1ee70"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keyword search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().keyword+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        //keyword seraches on the following fields so if any of them contain the request then this test will pass",
									"        pm.test(\"Keyword '\"+ pm.request.url.query.toObject().keyword+ \"'. Matches fields in response body.\", function () {",
									"            pm.expect(keywordMatch(responseBody.page.content, pm.request.url.query.toObject().keyword)).to.equal(true);",
									"        });",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().keyword +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"function keywordMatch(response, keyword)",
									"{",
									"    //keword contains space",
									"    if((/,%20/).test(keyword)==true)",
									"    {",
									"        var regexKeyword = new RegExp('('+ keyword.replaceAll(\",%20\", \"|\") +')',\"i\");",
									"    }",
									"    //keyword contains comma no space",
									"    else if((/,/).test(keyword)==true)",
									"    {",
									"        var regexKeyword = new RegExp('('+ keyword.replaceAll(\",\", \"|\") +')', \"i\");",
									"    }",
									"    //one word",
									"    else",
									"    {",
									"        var regexKeyword = new RegExp('('+ keyword +')', \"i\");",
									"    }",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        // search function will return -1 if no match",
									"        //i f return -1 then there's no match for given keyword",
									"        if( (response[i].body.firstName!=undefined && regexKeyword.test(response[i].body.firstName)==false ) && ",
									"            (response[i].body.lastName!=undefined && regexKeyword.test(response[i].body.lastName)==false ) && ",
									"            (response[i].body.displayName!=undefined && regexKeyword.test(response[i].body.displayName)==false) &&",
									"            ",
									"            (response[i].body.influencer.facebookProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.facebookProfile.username)==false ) &&",
									"            ",
									"            (response[i].body.influencer.instagramProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.instagramProfile.username)==false) &&",
									"            ",
									"            (response[i].body.influencer.twitterProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.twitterProfile.username)==false) &&",
									"            ",
									"            (response[i].body.influencer.youtubeProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.youtubeProfile.username)==false ) &&",
									"            ",
									"            (response[i].body.influencer.pinterestProfile!=undefined",
									"            && regexKeyword.test(response[i].body.influencer.pinterestProfile.username)==false ) &&",
									"            ",
									"            (response[i].body.influencer.tiktokProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.tiktokProfile.username)==false )",
									"            ",
									"            )",
									"            {",
									"                return false;",
									"            }",
									"            return true;         ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?size=10000&keyword=food, dog",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Travel",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food, dog",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories search - ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //will convert input to a list of categories",
									"    var inputList = [];",
									"    listInput(pm.request.url.query.toObject().categories);",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().categories+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        pm.test(\"Response contains given categories\", function(){",
									"            pm.expect(matchAllCategories(responseBody.page.content)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().categories +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"// input may contains \",\" or \"%20\" for space depending on how input is given (ex. Books, Travel in string as we get the input -> Books%20Travel)",
									"// functions ensures that input is in a list exluding such characters",
									"function listInput(categories)",
									"{",
									"    let category=\"\";",
									"",
									"    for(var i =0; i<categories.length; ++i)",
									"    {",
									"        if( (categories[i]==\"%\") || (categories[i]==\",\") || (categories[i]==\"2\") || (categories[i]==\"0\") )",
									"        {",
									"            //next character is a letter, meaning it's a new word and should be added to list",
									"            if( (categories[i+1]!=\"%\") && (categories[i+1]!=\",\") && (categories[i]!=\"2\") && (categories[i]!=\"0\") )",
									"            {",
									"                inputList.add(category);",
									"                category=\"\";",
									"            }",
									"        }",
									"        else if(i==(categories.length-1))   //end of string",
									"        {",
									"            category+= categories[i];",
									"            inputList.add(category)",
									"        }",
									"        else",
									"        {",
									"            category += categories[i];",
									"        }",
									"    }",
									"}",
									"",
									"// each creator obj contain a list of categories",
									"//this function takes a list and returns true if all categories given is found in a list",
									"function listContainsCategories(list, categoriesList)",
									"{",
									"    for(let i=0; i<categoriesList.length; ++i)",
									"    {",
									"        // indexOf() only returns -1 if it cant find the category",
									"        //if a category is not found it will return false since all categories should be found in the category list of the creator ",
									"        if(list.indexOf(categoriesList[i])==-1)",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"",
									"}",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchAllCategories(response)",
									"{",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        // listContainsCategories() will return false if the category list of a creator ",
									"        // doesn't contain the given categories ",
									"        if( listContainsCategories(response[i].body.influencer.categories, inputList) ==false)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?categories=Beauty, Travel&categoriesMatch=ALL&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty, Travel"
								},
								{
									"key": "categoriesMatch",
									"value": "ALL"
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories search - ANY",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //will convert input to a list of categories",
									"    var inputList = [];",
									"    listInput(pm.request.url.query.toObject().categories);",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().categories+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        pm.test(\"Returned creators match at least one of the given categories\", function(){",
									"            pm.expect(matchAnyCategories(responseBody.page.content)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().categories +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"// input may contains \",\" or \"%20\" for space depending on how input is given (ex. Books, Travel in string as we get the input -> Books%20Travel)",
									"// functions ensures that input is in a list exluding such characters",
									"function listInput(categories)",
									"{",
									"    let category=\"\";",
									"",
									"    for(var i =0; i<categories.length; ++i)",
									"    {",
									"        if( (categories[i]==\"%\") || (categories[i]==\",\") || (categories[i]==\"2\") || (categories[i]==\"0\") )",
									"        {",
									"            //next character is a letter, meaning it's a new word and should be added to list",
									"            if( (categories[i+1]!=\"%\") && (categories[i+1]!=\",\") && (categories[i]!=\"2\") && (categories[i]!=\"0\") )",
									"            {",
									"                inputList.add(category);",
									"                category=\"\";",
									"            }",
									"        }",
									"        else if(i==(categories.length-1))   //end of string",
									"        {",
									"            category+= categories[i];",
									"            inputList.add(category)",
									"        }",
									"        else",
									"        {",
									"            category += categories[i];",
									"        }",
									"    }",
									"}",
									"",
									"// each creator obj contain a list of categories",
									"//this function takes a list and returns true if any of the categories given are found in the list",
									"function listContainsCategories(list, categoriesList)",
									"{",
									"    for(let i=0; i<categoriesList.length; ++i)",
									"    {",
									"        // indexOf() only returns -1 if it cant find the category",
									"        // the list of categories for each creator only need to contain one category for ANY  ",
									"        if(list.indexOf(categoriesList[i])>-1)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return true;",
									"",
									"}",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchAnyCategories(response)",
									"{",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        // listContainsCategories() will return false if the category list of a creator ",
									"        // doesn't contain the any of the given categories ",
									"        if( listContainsCategories(response[i].body.influencer.categories, inputList) ==false)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?categories=Beauty, Travel&categoriesMatch=ANY&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty, Travel"
								},
								{
									"key": "categoriesMatch",
									"value": "ANY"
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate TM Comany",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //to validate that tm does work for the company returned in search call for tm, (GET serach/{username}) ",
									"    // search call don't return info of the tm only returns info of the company",
									"    pm.variables.set(\"comapnyName\", responseBody.object.manager.company)",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/juleshughes",
							"host": [
								"{{test}}user"
							],
							"path": [
								"juleshughes"
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().talentManager+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        // isManaged() checks if all influencer are under one tm company since the name of the manager is not returned in the response",
									"        // it also checks if isManaged is set to true for each influencer",
									"        pm.test(\"All creators are managed and are under the company \" + responseBody.page.content[0].body.managedBy.company, function () {",
									"            pm.expect(isManaged(responseBody.page.content, responseBody.page.content[0].body.managedBy.company)).to.equal(true);",
									"        });",
									"",
									"        // May not be needed!",
									"        // to validate that tm works for the company which is retutned for each creator",
									"        pm.test(\"Given tm works for company \" + pm.variables.get(\"comapnyName\"), function(){",
									"            pm.expect( pm.variables.get(\"comapnyName\").search(responseBody.page.content[0].body.managedBy.company) ).to.not.equal(-1);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().talentManager +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// isManaged should be set to true and all influencers should be under the same company",
									"// since a tm can only work for one company",
									"function isManaged(response, company)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].isManaged!=true && response[i].body.managedBy.company!=company)",
									"        {",
									"            return false;",
									"        }",
									"        return true;         ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?talentManager=juleshughes&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "juleshughes"
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gender Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().gender+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        // allSameGender() returns true if all creators are of the given gender",
									"        pm.test(\"All creators are of the gender \" + pm.request.url.query.toObject().gender+ \". TotalElements returned \" +responseBody.page.totalElements, function () {",
									"            pm.expect(allSameGender(responseBody.page.content, pm.request.url.query.toObject().gender)).to.equal(true);",
									"        });",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().gender +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given gender",
									"function allSameGender(response, gender)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].body.influencer.gender!=gender)",
									"        {",
									"            return false;",
									"        }",
									"        return true;         ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?gender=OTHER&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "OTHER"
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().profileStatus+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        //returns true if all creators are of the given profileStatus",
									"        pm.test(\"All creators have profileStatus \" + pm.request.url.query.toObject().profileStatus+ \". TotalElements returned \" +responseBody.page.totalElements, function () {",
									"            pm.expect(allSameType(responseBody.page.content, pm.request.url.query.toObject().profileStatus)).to.equal(true);",
									"        });",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().talentManager +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function allSameType(response, profileStatus)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].body.profileStatus!=profileStatus)",
									"        {",
									"            return false;",
									"        }",
									"        return true;         ",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=warminfluencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "warminfluencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Discover WARMY profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var responseText= pm.response.json().notes.userMessage;",
									"",
									"//to access parameter values",
									"//console.log(pm.request.url.query.toObject().username);",
									"//console.log(pm.request.url.query.toObject().platform);",
									"",
									"if(pm.response.code==200)",
									"{",
									"        //Checks if status is 200",
									"    pm.test(\"Status code is 200 for user '\"+pm.request.url.query.toObject().username + \"' and requested platform \" +pm.request.url.query.toObject().platform, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //Pass if it's businessVerified",
									"    pm.test(\"'\"+responseBody.object.profile.username+\"' is business verified\", function () {",
									"        pm.expect(pm.response.json().object.profile.businessVerified).to.eql(true);",
									"    });",
									"",
									"    //Passes if an object is returned",
									"    //a object is returned if the username isn't already connected to Hypetap",
									"    pm.test(\"User '\"+responseBody.object.profile.username +\"' is not connected to Hypetap\", function () {",
									"        pm.expect(responseBody.object.profile).to.have.property(\"username\");",
									"    });",
									"",
									"    // Checks if requested username matches the username given in the response",
									"    if (responseBody.object !== null) ",
									"    {",
									"        pm.test(\"Response contains username '\" + responseBody.object.profile.username +\"'\", function () {",
									"            pm.expect(pm.request.url.query.toObject().username).to.eql(responseBody.object.profile.username);",
									"        });",
									"    }",
									"",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"",
									"    //Checks if status is 400",
									"    pm.test(\"Status code is 400 for user '\"+pm.request.url.query.toObject().username + \"' and requested platform \" +pm.request.url.query.toObject().platform, function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"",
									"    //Checks the response text, if it returns any of the following then the test will pass",
									"    if(responseText!==null)",
									"    {",
									"        pm.test(\"Unsuccessfull: \"+ responseText, function () {",
									"        pm.expect(responseText).to.be.oneOf([",
									"            \"Instagram username contains invalid characters\",",
									"            \"Could not discover that profile. Please ensure it's not a private account\",",
									"            \"Profile type is not supported for discovery\"",
									"            ])    ",
									"        });",
									"    }",
									"",
									"    //Checks if account isbusinessVerified",
									"    //will only check if a user object is returned, i.e. if response contains a field for businessVerified",
									"    //Pass if it's not businessVerified",
									"    if((responseBody.object!==null))",
									"    {",
									"        pm.test(\"Business is not verified\", function () {",
									"        pm.expect(pm.response.json().object.profile.businessVerified).to.not.eql(true);",
									"        });",
									"    }",
									"",
									"    //Will only check if userMessage isn't empty",
									"    //Pass if user already exist at Hypetap",
									"    if(responseBody.notes.userMessage===null)",
									"    {",
									"        if(responseBody.notes.object.hypetapDisplayName!=null)",
									"        {",
									"            pm.test(\"User, '\" + pm.request.url.query.toObject().username + \"' is already connected to Hypetap\", function () {",
									"            pm.expect(responseBody.notes.object).to.have.property(\"hypetapDisplayName\");",
									"            });",
									"        }",
									"        else",
									"        {",
									"            pm.test(\"User, '\" + pm.request.url.query.toObject().username + \"' is archived\", function () {",
									"            pm.expect(responseBody.notes.object).to.have.property(\"EOIStatus\");",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/discover?username=zacstubblety&platform=INSTAGRAM",
							"host": [
								"{{test}}user"
							],
							"path": [
								"discover"
							],
							"query": [
								{
									"key": "username",
									"value": "zacstubblety"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Meta Active INF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"//pm.request.url.path[2]",
									"",
									"if (pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200\");",
									"",
									"    //Will return a user object if successful ",
									"    if(responseBody.object!=null)",
									"    {",
									"        pm.test(\"Returned meta for '\"+ responseBody.object.user.username+ \"'. with profilestatus '\"+ responseBody.object.user.profileStatus + \"'.\", function () {",
									"        pm.expect(responseBody.object.user).to.have.property(\"username\");",
									"        });",
									"",
									"        // Checks if requested username matches the username given in the response",
									"        pm.test(\"Response matches requested username '\"+ pm.request.url.path[2]+\"'\", function(){",
									"            pm.expect(responseBody.object.user.username).to.eql(pm.request.url.path[2])",
									"        });",
									"    }",
									"    else",
									"    {",
									"        //Checks if user profile is deleted",
									"        pm.test(\"User profile is not deleted\", function(){",
									"            pm.expect(pm.response.json().notes.userMessage).to.not.eql(\"User has been deleted\");",
									"        });",
									"    }",
									"}",
									"else if (pm.response.code==400 || pm.response.code==404 )",
									"{",
									"    pm.test(\"Status code is: \"+pm.response.code + \" for given username '\" + pm.request.url.path[2]+\"'\");",
									"",
									"    //If test fails then no user object should be returned",
									"    pm.test(\"Returns empty object\", function(){",
									"        pm.expect(responseBody.object).to.eql(null);",
									"    });",
									"",
									"    // Checkis if profile is deleted",
									"    if(responseBody.notes.userMessage!==null)",
									"    {",
									"        pm.test(\"User profile for '\"+pm.request.url.path[2]+\"' is deleted\", function(){",
									"            pm.expect(pm.response.json().notes.userMessage).to.eql(\"User has been deleted\");",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/hnybricks/meta",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hnybricks",
								"meta"
							]
						}
					},
					"response": []
				},
				{
					"name": "Meta Warm INF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"//pm.request.url.path[2]",
									"",
									"if (pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200\");",
									"",
									"    //Will return a user object if successful ",
									"    if(responseBody.object!=null)",
									"    {",
									"        pm.test(\"Returned meta for '\"+ responseBody.object.user.username+ \"'. with profilestatus '\"+ responseBody.object.user.profileStatus + \"'.\", function () {",
									"        pm.expect(responseBody.object.user).to.have.property(\"username\");",
									"        });",
									"",
									"        // Checks if requested username matches the username given in the response",
									"        pm.test(\"Response matches requested username '\"+ pm.request.url.path[2]+\"'\", function(){",
									"            pm.expect(responseBody.object.user.username).to.eql(pm.request.url.path[2])",
									"        });",
									"    }",
									"    else",
									"    {",
									"        //Checks if user profile is deleted",
									"        pm.test(\"User profile is not deleted\", function(){",
									"            pm.expect(pm.response.json().notes.userMessage).to.not.eql(\"User has been deleted\");",
									"        });",
									"    }",
									"}",
									"else if (pm.response.code==400 || pm.response.code==404 )",
									"{",
									"    pm.test(\"Status code is: \"+pm.response.code + \" for given username '\" + pm.request.url.path[2]+\"'\");",
									"",
									"    //If test fails then no user object should be returned",
									"    pm.test(\"Returns empty object\", function(){",
									"        pm.expect(responseBody.object).to.eql(null);",
									"    });",
									"",
									"    // Checkis if profile is deleted",
									"    if(responseBody.notes.userMessage!==null)",
									"    {",
									"        pm.test(\"User profile for '\"+pm.request.url.path[2]+\"' is deleted\", function(){",
									"            pm.expect(pm.response.json().notes.userMessage).to.eql(\"User has been deleted\");",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/storiesofamum/meta",
							"host": [
								"{{test}}user"
							],
							"path": [
								"storiesofamum",
								"meta"
							]
						}
					},
					"response": []
				},
				{
					"name": "Meta Deleted INF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"//pm.request.url.path[2]",
									"",
									"if (pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200\");",
									"",
									"    //Will return a user object if successful ",
									"    if(responseBody.object!=null)",
									"    {",
									"        pm.test(\"Returned meta for '\"+ responseBody.object.user.username+ \"'. with profilestatus '\"+ responseBody.object.user.profileStatus + \"'.\", function () {",
									"        pm.expect(responseBody.object.user).to.have.property(\"username\");",
									"        });",
									"",
									"        // Checks if requested username matches the username given in the response",
									"        pm.test(\"Response matches requested username '\"+ pm.request.url.path[2]+\"'\", function(){",
									"            pm.expect(responseBody.object.user.username).to.eql(pm.request.url.path[2])",
									"        });",
									"    }",
									"    else",
									"    {",
									"        //Checks if user profile is deleted",
									"        pm.test(\"User profile is not deleted\", function(){",
									"            pm.expect(pm.response.json().notes.userMessage).to.not.eql(\"User has been deleted\");",
									"        });",
									"    }",
									"}",
									"else if (pm.response.code==400 || pm.response.code==404 )",
									"{",
									"    pm.test(\"Status code is: \"+pm.response.code + \" for given username '\" + pm.request.url.path[2]+\"'\");",
									"",
									"    //If test fails then no user object should be returned",
									"    pm.test(\"Returns empty object\", function(){",
									"        pm.expect(responseBody.object).to.eql(null);",
									"    });",
									"",
									"    // Checkis if profile is deleted",
									"    if(responseBody.notes.userMessage!==null)",
									"    {",
									"        pm.test(\"User profile for '\"+pm.request.url.path[2]+\"' is deleted\", function(){",
									"            pm.expect(pm.response.json().notes.userMessage).to.eql(\"User has been deleted\");",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/snippiwippi/meta",
							"host": [
								"{{test}}user"
							],
							"path": [
								"snippiwippi",
								"meta"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET TM User Obj",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/juleshughes",
							"host": [
								"{{test}}user"
							],
							"path": [
								"juleshughes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET User Obj AGENCY",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/davidjones1",
							"host": [
								"{{test}}user"
							],
							"path": [
								"davidjones1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET User Obj INF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"var jsonData = pm.response.json();",
									"var influencerProfileStatus = jsonData.object.profileStatus",
									"",
									"pm.test(\"Verify profile status is influencer: \"+influencerProfileStatus, function () {",
									"    pm.expect(jsonData.object.profileStatus\t).to.eql('influencer');",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/melbournejade",
							"host": [
								"{{test}}user"
							],
							"path": [
								"melbournejade"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Platform Audience",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.platform==\"INSTAGRAM\") ",
									"    {",
									"            pm.test(\"Requested user's audience in \"+responseBody.object.platform +\" is returned\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"platform\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/hnybricks/audience/INSTAGRAM",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hnybricks",
								"audience",
								"INSTAGRAM"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET influencer's social channel data - FB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//returns 500 if requested user is not an influencer",
									"",
									"var responseBody = pm.response.json();",
									"",
									"//If no object is returned then a 400 or 404 ahould be returned ",
									"if(responseBody.object==null && responseBody.notes!==null)",
									"{",
									"    //Checks  status",
									"    pm.test(\"Status code is \"+ pm.response.code + \" for '\" +pm.request.url.path[2]+\"' and '\"+pm.request.url.path[3]+\"' Message: \"",
									"    + responseBody.notes.userMessage, function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([400, 404])",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Checking that response contains requested username",
									"    pm.test(\"Response contains requested username '\" +responseBody.object.user.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.user.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"     //The response should contain the social profile matching the given platform if call is successful ",
									"     switch (pm.request.url.path[3])",
									"    { ",
									"        case \"INSTAGRAM\":",
									"        pm.test(\"Response contains instagramProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.instagramProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"instagramProfile\");",
									"            pm.expect(responseBody.object.user.influencer.instagramProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.instagramProfile.dateUpdated)",
									"        break;",
									"        case \"FACEBOOK\":",
									"        pm.test(\"Response contains facebookProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.facebookProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"facebookProfile\");",
									"            pm.expect(responseBody.object.user.influencer.facebookProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.facebookProfile.dateUpdated)",
									"        break;",
									"        case \"TWITTER\":",
									"       pm.test(\"Response contains twitterProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.twitterProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"twitterProfile\");",
									"            pm.expect(responseBody.object.user.influencer.twitterProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.twitterProfile.dateUpdated)",
									"        break;",
									"        case \"PINTEREST\":",
									"        pm.test(\"Response contains pinterestProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"pinterestProfile\");",
									"            pm.expect(responseBody.object.user.influencer.pinterestProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.dateUpdated)",
									"        break;",
									"        case \"YOUTUBE\":",
									"        pm.test(\"Response contains youtubeProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.updateSuccess  , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"youtubeProfile\");",
									"            pm.expect(responseBody.object.user.influencer.youtubeProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.dateUpdated)",
									"        break;",
									"        case \"SNAPCHAT\":",
									"        pm.test(\"Response contains snapchatProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.updateSuccess , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"snapchatProfile\");",
									"            pm.expect(responseBody.object.user.influencer.snapchatProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.dateUpdated)",
									"        break;",
									"",
									"        case \"BLOG\":",
									"        pm.test(\"Response contains blogProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.blogProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"blogProfile\");",
									"            pm.expect(responseBody.object.user.influencer.blogProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.blogProfile.dateUpdated)",
									"        break;        ",
									"",
									"    }",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/hnybricks/FACEBOOK",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hnybricks",
								"FACEBOOK"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET influencer's social channel data - IG",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//returns 500 if requested user is not an influencer",
									"",
									"var responseBody = pm.response.json();",
									"",
									"//If no object is returned then a 400 or 404 ahould be returned ",
									"if(responseBody.object==null && responseBody.notes!==null)",
									"{",
									"    //Checks  status",
									"    pm.test(\"Status code is \"+ pm.response.code + \" for '\" +pm.request.url.path[2]+\"' and '\"+pm.request.url.path[3]+\"' Message: \"",
									"    + responseBody.notes.userMessage, function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([400, 404])",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Checking that response contains requested username",
									"    pm.test(\"Response contains requested username '\" +responseBody.object.user.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.user.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"     //The response should contain the social profile matching the given platform if call is successful ",
									"     switch (pm.request.url.path[3])",
									"    { ",
									"        case \"INSTAGRAM\":",
									"        pm.test(\"Response contains instagramProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.instagramProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"instagramProfile\");",
									"            pm.expect(responseBody.object.user.influencer.instagramProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.instagramProfile.dateUpdated)",
									"        break;",
									"        case \"FACEBOOK\":",
									"        pm.test(\"Response contains facebookProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.facebookProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"facebookProfile\");",
									"            pm.expect(responseBody.object.user.influencer.facebookProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.facebookProfile.dateUpdated)",
									"        break;",
									"        case \"TWITTER\":",
									"       pm.test(\"Response contains twitterProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.twitterProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"twitterProfile\");",
									"            pm.expect(responseBody.object.user.influencer.twitterProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.twitterProfile.dateUpdated)",
									"        break;",
									"        case \"PINTEREST\":",
									"        pm.test(\"Response contains pinterestProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"pinterestProfile\");",
									"            pm.expect(responseBody.object.user.influencer.pinterestProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.dateUpdated)",
									"        break;",
									"        case \"YOUTUBE\":",
									"        pm.test(\"Response contains youtubeProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.updateSuccess  , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"youtubeProfile\");",
									"            pm.expect(responseBody.object.user.influencer.youtubeProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.dateUpdated)",
									"        break;",
									"        case \"SNAPCHAT\":",
									"        pm.test(\"Response contains snapchatProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.updateSuccess , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"snapchatProfile\");",
									"            pm.expect(responseBody.object.user.influencer.snapchatProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.dateUpdated)",
									"        break;",
									"    ",
									"        case \"BLOG\":",
									"        pm.test(\"Response contains blogProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.blogProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"blogProfile\");",
									"            pm.expect(responseBody.object.user.influencer.blogProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.blogProfile.dateUpdated)",
									"        break;        ",
									"",
									"    }",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/hnybricks/INSTAGRAM",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hnybricks",
								"INSTAGRAM"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET influencer's social channel data - YT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//returns 500 if requested user is not an influencer",
									"",
									"var responseBody = pm.response.json();",
									"",
									"//If no object is returned then a 400 or 404 ahould be returned ",
									"if(responseBody.object==null && responseBody.notes!==null)",
									"{",
									"    //Checks  status",
									"    pm.test(\"Status code is \"+ pm.response.code + \" for '\" +pm.request.url.path[2]+\"' and '\"+pm.request.url.path[3]+\"' Message: \"",
									"    + responseBody.notes.userMessage, function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([400, 404])",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Checking that response contains requested username",
									"    pm.test(\"Response contains requested username '\" +responseBody.object.user.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.user.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"     //The response should contain the social profile matching the given platform if call is successful ",
									"     switch (pm.request.url.path[3])",
									"    { ",
									"        case \"INSTAGRAM\":",
									"        pm.test(\"Response contains instagramProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.instagramProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"instagramProfile\");",
									"            pm.expect(responseBody.object.user.influencer.instagramProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.instagramProfile.dateUpdated)",
									"        break;",
									"        case \"FACEBOOK\":",
									"        pm.test(\"Response contains facebookProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.facebookProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"facebookProfile\");",
									"            pm.expect(responseBody.object.user.influencer.facebookProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.facebookProfile.dateUpdated)",
									"        break;",
									"        case \"TWITTER\":",
									"       pm.test(\"Response contains twitterProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.twitterProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"twitterProfile\");",
									"            pm.expect(responseBody.object.user.influencer.twitterProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.twitterProfile.dateUpdated)",
									"        break;",
									"        case \"PINTEREST\":",
									"        pm.test(\"Response contains pinterestProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"pinterestProfile\");",
									"            pm.expect(responseBody.object.user.influencer.pinterestProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.dateUpdated)",
									"        break;",
									"        case \"YOUTUBE\":",
									"        pm.test(\"Response contains youtubeProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.updateSuccess  , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"youtubeProfile\");",
									"            pm.expect(responseBody.object.user.influencer.youtubeProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.dateUpdated)",
									"        break;",
									"        case \"SNAPCHAT\":",
									"        pm.test(\"Response contains snapchatProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.updateSuccess , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"snapchatProfile\");",
									"            pm.expect(responseBody.object.user.influencer.snapchatProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.dateUpdated)",
									"        break;",
									"    ",
									"        case \"BLOG\":",
									"        pm.test(\"Response contains blogProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.blogProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"blogProfile\");",
									"            pm.expect(responseBody.object.user.influencer.blogProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.blogProfile.dateUpdated)",
									"        break;        ",
									"",
									"    }",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/hnybricks/YOUTUBE",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hnybricks",
								"YOUTUBE"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET influencer's social channel data - TW",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//returns 500 if requested user is not an influencer",
									"",
									"var responseBody = pm.response.json();",
									"",
									"//If no object is returned then a 400 or 404 ahould be returned ",
									"if(responseBody.object==null && responseBody.notes!==null)",
									"{",
									"    //Checks  status",
									"    pm.test(\"Status code is \"+ pm.response.code + \" for '\" +pm.request.url.path[2]+\"' and '\"+pm.request.url.path[3]+\"' Message: \"",
									"    + responseBody.notes.userMessage, function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([400, 404])",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Checking that response contains requested username",
									"    pm.test(\"Response contains requested username '\" +responseBody.object.user.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.user.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"     //The response should contain the social profile matching the given platform if call is successful ",
									"     switch (pm.request.url.path[3])",
									"    { ",
									"        case \"INSTAGRAM\":",
									"        pm.test(\"Response contains instagramProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.instagramProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"instagramProfile\");",
									"            pm.expect(responseBody.object.user.influencer.instagramProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.instagramProfile.dateUpdated)",
									"        break;",
									"        case \"FACEBOOK\":",
									"        pm.test(\"Response contains facebookProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.facebookProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"facebookProfile\");",
									"            pm.expect(responseBody.object.user.influencer.facebookProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.facebookProfile.dateUpdated)",
									"        break;",
									"        case \"TWITTER\":",
									"       pm.test(\"Response contains twitterProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.twitterProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"twitterProfile\");",
									"            pm.expect(responseBody.object.user.influencer.twitterProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.twitterProfile.dateUpdated)",
									"        break;",
									"        case \"PINTEREST\":",
									"        pm.test(\"Response contains pinterestProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"pinterestProfile\");",
									"            pm.expect(responseBody.object.user.influencer.pinterestProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.dateUpdated)",
									"        break;",
									"        case \"YOUTUBE\":",
									"        pm.test(\"Response contains youtubeProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.updateSuccess  , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"youtubeProfile\");",
									"            pm.expect(responseBody.object.user.influencer.youtubeProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.dateUpdated)",
									"        break;",
									"        case \"SNAPCHAT\":",
									"        pm.test(\"Response contains snapchatProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.updateSuccess , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"snapchatProfile\");",
									"            pm.expect(responseBody.object.user.influencer.snapchatProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.dateUpdated)",
									"        break;",
									"       ",
									"        case \"BLOG\":",
									"        pm.test(\"Response contains blogProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.blogProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"blogProfile\");",
									"            pm.expect(responseBody.object.user.influencer.blogProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.blogProfile.dateUpdated)",
									"        break;        ",
									"",
									"    }",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/hnybricks/TWITTER",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hnybricks",
								"TWITTER"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET influencer's social channel data - BLOG",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//returns 500 if requested user is not an influencer",
									"",
									"var responseBody = pm.response.json();",
									"",
									"//If no object is returned then a 400 or 404 ahould be returned ",
									"if(responseBody.object==null && responseBody.notes!==null)",
									"{",
									"    //Checks  status",
									"    pm.test(\"Status code is \"+ pm.response.code + \" for '\" +pm.request.url.path[2]+\"' and '\"+pm.request.url.path[3]+\"' Message: \"",
									"    + responseBody.notes.userMessage, function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([400, 404])",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Checking that response contains requested username",
									"    pm.test(\"Response contains requested username '\" +responseBody.object.user.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.user.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"     //The response should contain the social profile matching the given platform if call is successful ",
									"     switch (pm.request.url.path[3])",
									"    { ",
									"        case \"INSTAGRAM\":",
									"        pm.test(\"Response contains instagramProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.instagramProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"instagramProfile\");",
									"            pm.expect(responseBody.object.user.influencer.instagramProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.instagramProfile.dateUpdated)",
									"        break;",
									"        case \"FACEBOOK\":",
									"        pm.test(\"Response contains facebookProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.facebookProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"facebookProfile\");",
									"            pm.expect(responseBody.object.user.influencer.facebookProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.facebookProfile.dateUpdated)",
									"        break;",
									"        case \"TWITTER\":",
									"       pm.test(\"Response contains twitterProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.twitterProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"twitterProfile\");",
									"            pm.expect(responseBody.object.user.influencer.twitterProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.twitterProfile.dateUpdated)",
									"        break;",
									"        case \"PINTEREST\":",
									"        pm.test(\"Response contains pinterestProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"pinterestProfile\");",
									"            pm.expect(responseBody.object.user.influencer.pinterestProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.pinterestProfile.dateUpdated)",
									"        break;",
									"        case \"YOUTUBE\":",
									"        pm.test(\"Response contains youtubeProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.updateSuccess  , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"youtubeProfile\");",
									"            pm.expect(responseBody.object.user.influencer.youtubeProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.youtubeProfile.dateUpdated)",
									"        break;",
									"        case \"SNAPCHAT\":",
									"        pm.test(\"Response contains snapchatProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.updateSuccess , function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"snapchatProfile\");",
									"            pm.expect(responseBody.object.user.influencer.snapchatProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.snapchatProfile.dateUpdated)",
									"        break;",
									"       ",
									"        case \"BLOG\":",
									"        pm.test(\"Response contains blogProfile. Given platform '\"+ pm.request.url.path[3]+\"' was updated successfully: \"",
									"        +responseBody.object.user.influencer.blogProfile.updateSuccess, function(){",
									"            pm.expect(responseBody.object.user.influencer).to.have.property(\"blogProfile\");",
									"            pm.expect(responseBody.object.user.influencer.blogProfile.updateSuccess).to.equal(true);",
									"        } );",
									"        pm.test(\"Given platform '\"+ pm.request.url.path[3]+\"' was last updated: \"",
									"        +responseBody.object.user.influencer.blogProfile.dateUpdated)",
									"        break;        ",
									"",
									"    }",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/hnybricks/BLOG",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hnybricks",
								"BLOG"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET influencer's socials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//returns 500 if requested user is not an influencer",
									"",
									"var responseBody = pm.response.json();",
									"",
									"//If no object is returned then a 400 or 404 ahould be returned ",
									"if(responseBody.object==null && responseBody.notes!==null)",
									"{",
									"    //Checks  status",
									"    pm.test(\"Status code is \"+ pm.response.code + \" for '\" +pm.request.url.path[2]+\"' Message: \"",
									"    + responseBody.notes.userMessage, function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([400, 404])",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // Checking that response contains requested username",
									"    pm.test(\"Response contains requested username '\" +responseBody.object.user.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.user.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"    //Will print update date for each profile if they exist",
									"    let profiles=[\"facebookProfile\",\"instagramProfile\",\"pinterestProfile\",\"twitterProfile\",\"youtubeProfile\",\"snapchatProfile\",\"blogProfile\",\"tiktokProfile\"];",
									"    for(let i=0; i< profiles.length; ++i)",
									"    {",
									"        if(responseBody.object.user.influencer[profiles[i]]!=undefined && responseBody.object.user.influencer[profiles[i]]!=null)",
									"        {",
									"            pm.test(\"Response contains \" +[profiles[i]]+ \". Was successfully updated\", function(){",
									"                pm.expect(responseBody.object.user.influencer[profiles[i]].updateSuccess).to.equal(true);",
									"            } )",
									"",
									"            // to printe update date +responseBody.object.user.influencer[profiles[i]].dateUpdated",
									"        }",
									"    }",
									"",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/hnybricks/social/update",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hnybricks",
								"social",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "List notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned and that the object containing notifications isn't null",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+ \" notifications for logged in user: '\"+ responseBody.session.authUser +\"' and sso status '\" ",
									"            +responseBody.session.ssoPrivilege+\"'\", function () {",
									"        pm.expect(responseBody.object).to.not.equal(null);",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status is 401\");",
									"    pm.test(responseBody.notes.userMessage, function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"Unauthenticated\");",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"timeSoFar=parseInt(pm.variables.get(\"accumulateResponseTime\"));",
					"newTime = timeSoFar+pm.response.responseTime;",
					"",
					"pm.variables.set(\"accumulateResponseTime\", newTime);",
					"pm.test(\"Accumulative Response Time: \"+ pm.variables.get(\"accumulateResponseTime\")+\"ms\");",
					"",
					"if(pm.response.code==200)",
					"{",
					"    //Will only run validation test if call has a request body",
					"    if(pm.request.body.raw!=undefined && pm.request.body.raw!=null",
					"    && pm.request.body.raw!=\"\")",
					"    {",
					"",
					"        var request = JSON.parse(pm.request.body.raw);",
					"        convertedRequest = {};",
					"        obj(request,\"t\");",
					"    // console.log(\"new\",convertedRequest)",
					"",
					"        var containDigits= /\\d{1,}/;",
					"        var onlyDigits =/^[0-9]{1,}$/; //only allows numbers no space",
					"        var onlyLetters = /^[A-Z,a-z]{1,}$/;    //doesn't allow space",
					"        var notOnlySpace = (/\\S/);",
					"",
					"        var validName =/^([A-Z])[a-z'-]{2,30}$/;   //has to be 2-30 characters, doesn't allow space",
					"        var validNameNoSpecialChar =/^([A-Z])[a-z]{2,}$/;    //doesn't allow numbers ",
					"        var validUsername= /^[a-z0-9_]*$/;   //from backend",
					"        var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; //have existing func. in backend",
					"        var validPhoneNum = /^[0-9+-]{1,}$/;   // numbers only and - +",
					"    ",
					"        //social profile usernames",
					"        var validateTikTokUsername= /^[\\w\\d_.]+$/;",
					"        var validateFBUsername= /^[\\w\\d\\-.]+$/;",
					"        var validateInstaUsername= /^[\\w\\d_.]+$/;",
					"        var validatePineterestUsername= /^[\\w\\d]+$/;",
					"        var validateTwitterUsername= /[\\w\\d\\-_]+$/;",
					"        var validateYoutubeUsername= /^[\\w\\d\\-_]+$/;",
					"        var validateBlogUsername= /\\s/;    //blog should not contain space",
					"        ",
					"        //Address",
					"        //all fields needs to be provided to be valid otherwise get 400. So it's enough to check if one field is given ",
					"        if( (convertedRequest.street1!=undefined))",
					"        {",
					"            pm.test(\"Address is valid\", function(){",
					"                pm.expect( notOnlySpace.test(convertedRequest.street1 )).to.equal(true);",
					"                pm.expect( validNameNoSpecialChar.test(convertedRequest.city) ).to.equal(true);",
					"                pm.expect( onlyLetters.test(convertedRequest.state) ).to.equal(true);",
					"                pm.expect( validNameNoSpecialChar.test(convertedRequest.country) ).to.equal(true);            ",
					"                pm.expect( onlyDigits.test(convertedRequest.zipcode) ).to.equal(true);            ",
					"            })",
					"        }",
					"        //first name",
					"        if(convertedRequest.firstName!=undefined)",
					"        {",
					"            pm.test(\"First name is valid\", function(){",
					"                pm.expect((validName.test(convertedRequest.firstName))).to.equal(true);",
					"            });",
					"        }",
					"        //last name",
					"        if(convertedRequest.lastName!=undefined)",
					"        {",
					"            pm.test(\"Last name is valid\", function(){",
					"                pm.expect(validName.test(convertedRequest.lastName)).to.equal(true);",
					"            });",
					"        }",
					"",
					"        if(convertedRequest.gender!=undefined)",
					"        {",
					"            pm.test(\"Gender is valid\", function(){",
					"                pm.expect(convertedRequest.gender).to.be.oneOf([\"FEMALE\", \"MALE\", \"OTHER\"]);",
					"            });",
					"        }",
					"",
					"",
					"        //username",
					"        if(convertedRequest.username!=undefined)",
					"        {",
					"            pm.test(\"Username is valid\", function(){",
					"                pm.expect(validUsername.test(convertedRequest.username)).to.equal(true);",
					"            });",
					"        }",
					"        // displayName",
					"        if(convertedRequest.displayName!=undefined)",
					"        {",
					"            pm.test(\"displayName is valid\", function(){",
					"                pm.expect(notOnlySpace.test(convertedRequest.displayName)).to.equal(true);",
					"            });",
					"        }",
					"    ",
					"        //tiktokProfile.username",
					"        if(convertedRequest.tiktokProfileusername!=undefined)",
					"        {",
					"            pm.test(\"Tiktok username is valid\", function(){",
					"                pm.expect(validateTikTokUsername.test(convertedRequest.tiktokProfileusername)).to.equal(true);",
					"            });",
					"        }",
					"        ",
					"        //facebookProfile.username",
					"        if(convertedRequest.facebookProfileusername!=undefined)",
					"        {",
					"            pm.test(\"Facebook username is valid\", function(){",
					"                pm.expect(validateFBUsername.test(convertedRequest.facebookProfileusername)).to.equal(true);",
					"            });",
					"        }",
					"        //instagramProfile.username",
					"        if(convertedRequest.instagramProfileusername!=undefined)",
					"        {",
					"            pm.test(\"Instagram username is valid\", function(){",
					"                pm.expect(validateInstaUsername.test(convertedRequest.instagramProfileusername)).to.equal(true);",
					"            });",
					"        }",
					"        //pinterestProfile.username",
					"        if(convertedRequest.pinterestProfileusername!=undefined)",
					"        {",
					"            pm.test(\"Pinterest username is valid\", function(){",
					"                pm.expect(validatePineterestUsername.test(convertedRequest.pinterestProfileusername)).to.equal(true);",
					"            });",
					"        }",
					"        //twitter.username",
					"        if(convertedRequest.twitterProfileusername!=undefined)",
					"        {",
					"            pm.test(\"Twitter username is valid\", function(){",
					"                pm.expect(validateTwitterUsername.test(convertedRequest.twitterProfileusername)).to.equal(true);",
					"            });",
					"        }  ",
					"",
					"        //youtube.username",
					"        if(convertedRequest.youtubeProfileusername!=undefined)",
					"        {",
					"            pm.test(\"Youtube username is valid\", function(){",
					"                pm.expect(validateYoutubeUsername.test(convertedRequest.youtubeProfileusername)).to.equal(true);",
					"            });",
					"        } ",
					"        ",
					"        //blogProfile.username",
					"        if(convertedRequest.blogProfileusername!=undefined)",
					"        {",
					"            //validateBlog will return true if white space is found",
					"            //so if it returns false, (i.e no space found) then its a valid username",
					"            pm.test(\"Blog username is valid\", function(){",
					"                pm.expect(validateBlogUsername.test(convertedRequest.blogProfileusername)).to.equal(false);",
					"            });",
					"        }",
					"",
					"        //phoneNumber",
					"        if(convertedRequest.phoneNumber!=undefined)",
					"        {",
					"            pm.test(\"phoneNumber is valid\", function(){",
					"            pm.expect(validPhoneNum.test(convertedRequest.phoneNumber)).to.equal(true);",
					"            });",
					"        }",
					"",
					"        //email",
					"        if(convertedRequest.email!=undefined)",
					"        {",
					"            pm.test(\"Email is valid\", function(){",
					"            pm.expect(validEmail.test(convertedRequest.email)).to.equal(true);",
					"            });",
					"        }",
					"",
					"        //description",
					"        if(convertedRequest.description!=undefined)",
					"        {",
					"        pm.test(\"Valid description\", function(){",
					"            pm.expect(notOnlySpace.test(convertedRequest.description)).to.equal(true);",
					"        })",
					"        }",
					"            //description",
					"        if(convertedRequest.descriptionLong!=undefined)",
					"        {",
					"        pm.test(\"Valid descriptionLong\", function(){",
					"            pm.expect(notOnlySpace.test(convertedRequest.descriptionLong)).to.equal(true);",
					"        })",
					"        }",
					"        ",
					"    }",
					"}",
					"",
					"//----------------Functions",
					"",
					"function obj(object,root)",
					"{    ",
					"    Object.entries(object).forEach((entry) => {",
					"    const [key, value] = entry;",
					"",
					"        //to avoid function from failing due to null values",
					"        if(value!=null)",
					"        {",
					"            if(typeof value === \"object\")",
					"            {",
					"                root=key;",
					"                obj(value,root);",
					"            }",
					"            else",
					"            {",
					"                //to stop function from overwriting fileds with same name, (ex username)",
					"                if(convertedRequest.hasOwnProperty(key)==true)  //new test",
					"                {",
					"                    convertedRequest[root+key]= value;  //+\".\"+",
					"                }",
					"                else",
					"                {",
					"                    convertedRequest[key]= value;",
					"                }",
					"",
					"            }",
					"        } ",
					"    });",
					"    ",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "updateUsername",
			"value": "melbournejade"
		},
		{
			"key": "addWarmyUsername",
			"value": "thewalkerways"
		},
		{
			"key": "updateWarmyEmail",
			"value": "dumbanddummy1+thewalkerways123@gmail.com"
		},
		{
			"key": "deleteSocialsUsername",
			"value": "raveena"
		},
		{
			"key": "accumulateResponseTime",
			"value": "0"
		},
		{
			"key": "userIdEmancipate",
			"value": "5e682c1221813743ac7046f0"
		},
		{
			"key": "adoptEmancipateInfluencerId",
			"value": "59c9e66a7299ab48321fed59"
		},
		{
			"key": "adoptEmancipateToSsoId",
			"value": "5aab23ff2181377628bd3858"
		},
		{
			"value": "60a4a6912181376ed99d81d2"
		},
		{
			"key": "negUserIdEmancipate",
			"value": "5b206649218137031a9a6dca"
		},
		{
			"key": "negUsernameEmancipatePart2",
			"value": "the_stables_"
		}
	]
}